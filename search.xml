<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RSA-大礼包</title>
      <link href="/Blog/2024/11/25/RSA/"/>
      <url>/Blog/2024/11/25/RSA/</url>
      
        <content type="html"><![CDATA[<h3 id="解密过程">解密过程</h3><p>我们需要批量读取文件，并且分析每个帧内1024bit模数N | 1024bit加密指数e | 1024bit密文<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup></mrow><annotation encoding="application/x-tex">m^{e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span></span></span></span> mod N是否存在相互关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyexpat.errors <span class="keyword">import</span> messages</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br></pre></td></tr></table></figure><p>首先我们设置4个列表，分别存储N，e，c，m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n_list = &#123;&#125;</span><br><span class="line">e_list = &#123;&#125;</span><br><span class="line">c_list = &#123;&#125;</span><br><span class="line">m_list = &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其次我们需要读取文件，然后分析每个帧内的N，e，c，m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_file</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">        filename = <span class="string">f&#x27;Frame<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            n = <span class="built_in">int</span>(f.read(<span class="number">256</span>).strip(), <span class="number">16</span>)</span><br><span class="line">            n_list[i] = n</span><br><span class="line">            e = <span class="built_in">int</span>(f.read(<span class="number">256</span>).strip(), <span class="number">16</span>)</span><br><span class="line">            e_list[i] = e</span><br><span class="line">            c = <span class="built_in">int</span>(f.read(<span class="number">256</span>).strip(), <span class="number">16</span>)</span><br><span class="line">            c_list[i] = c</span><br></pre></td></tr></table></figure><p>分析是否有相同的参数e和N</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    read_file()</span><br><span class="line">    <span class="comment"># 输出e</span></span><br><span class="line">    <span class="keyword">for</span> i, e_1 <span class="keyword">in</span> e_list.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;e<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;e_1&#125;</span>&#x27;</span>.<span class="built_in">format</span>(i, e_1))</span><br><span class="line">    <span class="comment"># 输出相同的n</span></span><br><span class="line">    <span class="keyword">for</span> i, n_1 <span class="keyword">in</span> n_list.items():</span><br><span class="line">        <span class="keyword">for</span> j, n_2 <span class="keyword">in</span> n_list.items():</span><br><span class="line">            <span class="keyword">if</span> i &lt; j <span class="keyword">and</span> n_1 == n_2:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;n<span class="subst">&#123;i&#125;</span> = n<span class="subst">&#123;j&#125;</span> = <span class="subst">&#123;n_1&#125;</span>&#x27;</span>.<span class="built_in">format</span>(i, j, n_1))</span><br></pre></td></tr></table></figure><pre><code>e0:46786465362686334917265996843779843233606992585424976481745055335468678697948774988450305612127967926533923268260412557000125153569622340353246096040604284883505587337829322949633637609180797447754513992039018904786537115087888005528547900640339270052628915440787357271345416818313808448127098885767015748889e1:65537e2:65537e3:5e4:152206992575706893484835984472544529509325440944131662631741403414037956695665533186650071476146389737020554215956181827422540843366433981607643940546405002217220286072880967331118344806315756304650248634546597784597963886656422706197757265316981889118026978865295597135470735576032282694348773714479076093197e5:65537e6:65537e7:3e8:5e9:65537e10:65537e11:3e12:5e13:65537e14:65537e15:3e16:5e17:65537e18:65537e19:65537e20:5n0 = n4 = 90058705186558569935261948496132914380077312570281980020033760044382510933070450931241348678652103772768114420567119848142360867111065753301402088676701668212035175754850951897103338079978959810673297215370534716084813732883918187890434411552463739669878295417744080700424913250020348487161014643951785502867</code></pre><p>我们发现第0帧和第4帧的n值相同并且e是互素的，根据题目所知，Alice初步发送的时候会重复发送相同明文分片。接下来我们假设他们加密的是相同的密文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">same_N</span>(<span class="params">c1, c2, e1, e2, n</span>):</span><br><span class="line">    g, s, t = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    m = gmpy2.powmod(c1,s,n) * gmpy2.powmod(c2,t,n) % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">m = same_N(c_list[<span class="number">0</span>], c_list[<span class="number">4</span>], e_list[<span class="number">0</span>], e_list[<span class="number">4</span>], n_list[<span class="number">0</span>])</span><br><span class="line">byte = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[-<span class="number">16</span>:]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;0和4的明文是：<span class="subst">&#123;byte&#125;</span>&#x27;</span>)</span><br><span class="line">m_list[<span class="number">0</span>] = m_list[<span class="number">4</span>] = byte</span><br></pre></td></tr></table></figure><pre><code>0和4的明文是：My secre</code></pre><p>然后我们发现第3，8，12，16，20帧的e均为5相对较小，根据题目所知，Alice初步发送的时候会重复发送相同明文分片。接下来我们假设他们加密的是相同的密文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crt</span>(<span class="params">a,m</span>):</span><br><span class="line">    M = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        M *= i</span><br><span class="line">    Mi = [M//i <span class="keyword">for</span> i <span class="keyword">in</span> m]</span><br><span class="line">    Mi_ = [gmpy2.invert(M//i, i) <span class="keyword">for</span> i <span class="keyword">in</span> m]</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        x += a[i]*Mi[i]*Mi_[i]</span><br><span class="line">    <span class="keyword">return</span> x % M</span><br></pre></td></tr></table></figure><p>根据中国剩余定理，我们可以解出密文m，再对答案求5次方根得到明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c5_list = [c_list[<span class="number">3</span>], c_list[<span class="number">8</span>], c_list[<span class="number">12</span>], c_list[<span class="number">16</span>], c_list[<span class="number">20</span>]]</span><br><span class="line">n5_list = [n_list[<span class="number">3</span>], n_list[<span class="number">8</span>], n_list[<span class="number">12</span>], n_list[<span class="number">16</span>], n_list[<span class="number">20</span>]]</span><br><span class="line">m = crt(c5_list, n5_list)</span><br><span class="line">m = gmpy2.iroot(m, <span class="number">5</span>)[<span class="number">0</span>]</span><br><span class="line">byte = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[-<span class="number">16</span>:]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;3，8，12，16，20的明文是：<span class="subst">&#123;byte&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>]:</span><br><span class="line">    m_list[i] = byte</span><br></pre></td></tr></table></figure><pre><code>3，8，12，16，20的明文是：t is a f</code></pre><p>接下来我们来探寻N里面是否有不相同且不互素的情况，这样就能够求出相应的大素数p和q。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, n_1 <span class="keyword">in</span> n_list.items():</span><br><span class="line">    <span class="keyword">for</span> j, n_2 <span class="keyword">in</span> n_list.items():</span><br><span class="line">        <span class="keyword">if</span> i &lt; j <span class="keyword">and</span> gmpy2.gcd(n_1, n_2) != <span class="number">1</span> <span class="keyword">and</span> n_1 != n_2:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;n<span class="subst">&#123;i&#125;</span>和n<span class="subst">&#123;j&#125;</span>不相同且不互素&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>n1和n18不相同且不互素</code></pre><p>考虑到n1和n18不互素，这样就能够求出相应的大素数p和q然后计算出d1和d18私钥进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c1, c2, e1, e2, n1, n2</span>):</span><br><span class="line">    p = gmpy2.gcd(n1, n2)</span><br><span class="line">    q1 = n1 // p</span><br><span class="line">    q2 = n2 // p</span><br><span class="line">    d1 = gmpy2.invert(e1, (p-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line">    d2 = gmpy2.invert(e2, (p-<span class="number">1</span>)*(q2-<span class="number">1</span>))</span><br><span class="line">    m1 = gmpy2.powmod(c1, d1, n1)</span><br><span class="line">    m2 = gmpy2.powmod(c2, d2, n2)</span><br><span class="line">    <span class="keyword">return</span> m1, m2</span><br></pre></td></tr></table></figure><p>以上函数编写的是解密函数，接下来我们调用函数进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">m1, m18 = decrypt(c_list[<span class="number">1</span>], c_list[<span class="number">18</span>], e_list[<span class="number">1</span>], e_list[<span class="number">18</span>], n_list[<span class="number">1</span>], n_list[<span class="number">18</span>])</span><br><span class="line">byte1 = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m1)[-<span class="number">16</span>:]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">byte18 = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m18)[-<span class="number">16</span>:]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;1的明文是：<span class="subst">&#123;byte1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;18的明文是：<span class="subst">&#123;byte18&#125;</span>&#x27;</span>)</span><br><span class="line">m_list[<span class="number">1</span>] = byte1</span><br><span class="line">m_list[<span class="number">18</span>] = byte18</span><br></pre></td></tr></table></figure><pre><code>1的明文是：. Imagin18的明文是：m A to B</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, byte <span class="keyword">in</span> m_list.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;明文<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;byte&#125;</span>&#x27;</span>.<span class="built_in">format</span>(i, byte))</span><br></pre></td></tr></table></figure><pre><code>明文0:My secre明文4:My secre明文3:t is a f明文8:t is a f明文12:t is a f明文16:t is a f明文20:t is a f明文1:. Imagin明文18:m A to B</code></pre><p>对于帧10和帧14我们可以运用费马分解来分解大整数N得到素数p和q，然后计算出私钥d进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n</span>):  <span class="comment"># 费马分解n为p、q</span></span><br><span class="line">    a = gmpy2.isqrt(n)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        b = gmpy2.isqrt(a * a - n)</span><br><span class="line">        <span class="keyword">if</span> n == (a + b) * (a - b):</span><br><span class="line">            <span class="keyword">return</span> a + b, a - b</span><br><span class="line">        a += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">10</span>,<span class="number">14</span>]:</span><br><span class="line">    p, q = fermat(n_list[i])</span><br><span class="line">    d = gmpy2.invert(e_list[i], (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    m = gmpy2.powmod(c_list[i], d, n_list[i])</span><br><span class="line">    byte = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[-<span class="number">16</span>:]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>的明文是：<span class="subst">&#123;byte&#125;</span>&#x27;</span>)</span><br><span class="line">    m_list[i] = byte</span><br></pre></td></tr></table></figure><pre><code>10的明文是：will get14的明文是： you fro</code></pre><p>对于帧2,6,19可以利用pollard_rho算法进行分解大整数N得到素数p和q，然后计算出私钥d进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pollard_rho</span>(<span class="params">n</span>):</span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">1000000</span>):</span><br><span class="line">        x = <span class="built_in">pow</span>(x, i, n)</span><br><span class="line">        y = gmpy2.gcd(x-<span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> y != <span class="number">1</span> <span class="keyword">and</span> y != n:</span><br><span class="line">            <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><p>接下来我们调用函数进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">6</span>, <span class="number">19</span>]:</span><br><span class="line">    p = pollard_rho(n_list[i])</span><br><span class="line">    q = n_list[i] // p</span><br><span class="line">    d = gmpy2.invert(e_list[i], (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    m = gmpy2.powmod(c_list[i], d, n_list[i])</span><br><span class="line">    byte = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[-<span class="number">16</span>:]).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>的明文是：<span class="subst">&#123;byte&#125;</span>&#x27;</span>)</span><br><span class="line">    m_list[i] = byte</span><br></pre></td></tr></table></figure><pre><code>2的明文是： That is6的明文是： &quot;Logic 19的明文是：instein.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, byte <span class="keyword">in</span> m_list.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;明文<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;byte&#125;</span>&#x27;</span>.<span class="built_in">format</span>(i, byte))</span><br></pre></td></tr></table></figure><pre><code>明文0:My secre明文4:My secre明文3:t is a f明文8:t is a f明文12:t is a f明文16:t is a f明文20:t is a f明文1:. Imagin明文18:m A to B明文10:will get明文14: you fro明文2: That is明文6: &quot;Logic 明文19:instein.</code></pre><p>通过这些帧的明文我们能够猜出明文是b’My secret is a famous saying of Albert Einstein. That is “Logic will get you from A to B. Imagination will take you everywhere.”’</p><h3 id="实验总结">实验总结</h3><p>本次实验我充分了解了RSA算法的运行过程，并且更加熟悉了运用公钥和私钥加解密的程序编写。本实验运用了各种常用的破解RSA密码的方法，让我对共模攻击、低加密密指数攻击、低解密指数攻击、因数碰撞攻击、随机数发生器攻击、coppersmith等方法有了更详细的了解。</p><h3 id="参考文献">参考文献</h3><ol><li><a href="https://blog.csdn.net/guyanqiuqiu/article/details/139724480?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=139724480&amp;sharerefer=PC&amp;sharesource=Rachelbb8&amp;sharefrom=from_link">https://blog.csdn.net/guyanqiuqiu/article/details/139724480?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=139724480&amp;sharerefer=PC&amp;sharesource=Rachelbb8&amp;sharefrom=from_link</a></li><li><a href="https://blog.csdn.net/PrimiHub/article/details/139853734?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=139853734&amp;sharerefer=PC&amp;sharesource=Rachelbb8&amp;sharefrom=from_link">https://blog.csdn.net/PrimiHub/article/details/139853734?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=139853734&amp;sharerefer=PC&amp;sharesource=Rachelbb8&amp;sharefrom=from_link</a></li><li><a href="https://www.tr0y.wang/2017/11/06/CTFRSA/#%E5%A4%A7%E6%95%B0%E5%88%86%E8%A7%A3%E7%AE%97%E6%B3%95">https://www.tr0y.wang/2017/11/06/CTFRSA/#大数分解算法</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 密码学实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国剩余定理</title>
      <link href="/Blog/2024/11/13/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
      <url>/Blog/2024/11/13/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="信息安全基础与密码学综合实验">信息安全基础与密码学综合实验</h2><h1>实 验 报 告（二）</h1><h2 id="中国剩余定理">中国剩余定理</h2><h2 id="一、实验目的（包括实验环境、实现目标等等）">一、实验目的（包括实验环境、实现目标等等）</h2><ol><li><strong>实验环境</strong>：Python 3.11.3</li><li><strong>实现目标</strong>：根据中国剩余定理的原理，编写程序进行一次同余方程的求解，并且基于给定的大整数进行测试、验证。</li></ol><h2 id="二、方案设计">二、方案设计</h2><h3 id="背景">背景</h3><p>本实验旨在通过代码实现中国剩余定理来解决同余方程组的问题。中国剩余定理是数论中的一个重要定理，它提供了一种在模数互素的情况下，求解多个同余方程组的方法，十分便捷。</p><h3 id="原理（中国剩余定理）">原理（中国剩余定理）</h3><p>设正整数 ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>m</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">m_1, m_2, \ldots, m_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ) 两两互素，对任意整数 ( $a_1, a_2, \ldots, a_k $)，一次同余方程组：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≡</mo><msub><mi>a</mi><mn>1</mn></msub><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><msub><mi>m</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≡</mo><msub><mi>a</mi><mn>2</mn></msub><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><msub><mi>m</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≡</mo><msub><mi>a</mi><mi>k</mi></msub><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><msub><mi>m</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}x \equiv a_1 \pmod{m_1} \\x \equiv a_2 \pmod{m_2} \\\vdots \\x \equiv a_k \pmod{m_k}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.252em;vertical-align:-2.876em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-1.366em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.358em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="1.216em" style="width:0.8889em" viewBox="0 0 888.89 1216" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V1216 H384z M384 0 H504 V1216 H384z"/></svg></span></span><span style="top:-3.216em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.358em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="1.216em" style="width:0.8889em" viewBox="0 0 888.89 1216" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V1216 H384z M384 0 H504 V1216 H384z"/></svg></span></span><span style="top:-5.566em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.376em;"><span style="top:-6.0555em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-4.6155em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.6835em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.2435em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.876em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>在模$ m$意义下有唯一解，该解可表示为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>≡</mo><msub><mi>M</mi><mn>1</mn></msub><msubsup><mi>M</mi><mn>1</mn><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>M</mi><mn>2</mn></msub><msubsup><mi>M</mi><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mo>…</mo><mo>+</mo><msub><mi>M</mi><mi>k</mi></msub><msubsup><mi>M</mi><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>a</mi><mi>k</mi></msub><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x \equiv M_1M_1^{-1}a_1 + M_2M_2^{-1}a_2 + \ldots + M_kM_k^{-1}a_k \pmod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4637em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1205em;vertical-align:-0.2564em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.4436em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2564em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1205em;vertical-align:-0.2564em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.4436em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2564em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1555em;vertical-align:-0.2914em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.4086em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2914em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></span></p><p>其中：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mo>=</mo><msub><mi>m</mi><mn>1</mn></msub><msub><mi>m</mi><mn>2</mn></msub><mo>…</mo><msub><mi>m</mi><mi>k</mi></msub><mo separator="true">,</mo><mspace width="1em"/><msub><mi>M</mi><mi>j</mi></msub><mo>=</mo><mfrac><mi>m</mi><msub><mi>m</mi><mi>j</mi></msub></mfrac><mo separator="true">,</mo><mspace width="1em"/><msub><mi>M</mi><mi>j</mi></msub><msubsup><mi>M</mi><mi>j</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><msub><mi>m</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mi>j</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">m = m_1m_2\ldots m_k, \quad M_j = \frac{m}{m_j}, \quad M_jM_j^{-1} \equiv 1 \pmod{m_j}, \quad j = 1, 2, \ldots, k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0797em;vertical-align:-0.9721em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.433em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4031em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span></p><h3 id="算法">算法</h3><p>如果我们有一组同余方程：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≡</mo><msub><mi>a</mi><mn>1</mn></msub><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><msub><mi>m</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≡</mo><msub><mi>a</mi><mn>2</mn></msub><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><msub><mi>m</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>≡</mo><msub><mi>a</mi><mi>k</mi></msub><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><msub><mi>m</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}x \equiv a_1 \pmod{m_1} \\x \equiv a_2 \pmod{m_2} \\\vdots \\x \equiv a_k \pmod{m_k}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.252em;vertical-align:-2.876em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-1.366em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.358em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="1.216em" style="width:0.8889em" viewBox="0 0 888.89 1216" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V1216 H384z M384 0 H504 V1216 H384z"/></svg></span></span><span style="top:-3.216em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.358em;"><span class="pstrut" style="height:3.216em;"></span><span style="height:1.216em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="1.216em" style="width:0.8889em" viewBox="0 0 888.89 1216" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V1216 H384z M384 0 H504 V1216 H384z"/></svg></span></span><span style="top:-5.566em;"><span class="pstrut" style="height:3.216em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.376em;"><span style="top:-6.0555em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-4.6155em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.6835em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-1.2435em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.876em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>需要求其解：</p><ol><li>判断正整数 ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>m</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">m_1, m_2, \ldots, m_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ) 是否两两互素；是，则继续，否则输出“不能直接利用中国剩余定理”。</li><li>计算 ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><msub><mi>m</mi><mn>1</mn></msub><msub><mi>m</mi><mn>2</mn></msub><mo>…</mo><msub><mi>m</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">m = m_1m_2\ldots m_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> )，$M_j = \frac{m}{m_j} $。</li><li>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>M</mi><mi>j</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><msub><mi>m</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">M_j^{-1} \pmod{m_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2672em;vertical-align:-0.413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8542em;"><span style="top:-2.4231em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1031em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</li><li>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub><mo>≡</mo><msub><mi>M</mi><mi>j</mi></msub><msubsup><mi>M</mi><mi>j</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>a</mi><mi>j</mi></msub><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><msub><mi>m</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_j \equiv M_jM_j^{-1}a_j \pmod{m_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7499em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2672em;vertical-align:-0.413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8542em;"><span style="top:-2.4231em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1031em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</li><li>计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>≡</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></msubsup><msub><mi>x</mi><mi>j</mi></msub><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x \equiv \sum_{j=1}^{k}x_j \pmod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4637em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4248em;vertical-align:-0.4358em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.989em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>。</li></ol><h2 id="三、方案实现">三、方案实现</h2><h3 id="流程图">流程图</h3><p><img src="/Blog/img/crt-chart.png" alt="流程图"></p><h3 id="主要函数介绍">主要函数介绍</h3><h4 id="欧几里得算法">欧几里得算法</h4><p>用于计算最大公约数和模逆：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    g, x1, y1 = egcd(b % a, a)</span><br><span class="line">    x = y1 - (b // a) * x1</span><br><span class="line">    y = x1</span><br><span class="line">    <span class="keyword">return</span> g, x, y</span><br></pre></td></tr></table></figure><h4 id="模逆运算">模逆运算</h4><p>定义 <code>invmod(a, b)</code> 函数，用于求解 ( a ) 模 ( b ) 的逆：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">invmod</span>(<span class="params">a, b</span>):</span><br><span class="line">    g, x, y = egcd(a, b)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;模逆不存在&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % b</span><br></pre></td></tr></table></figure><h4 id="中国剩余定理实现">中国剩余定理实现</h4><p>定义 <code>crt(a, m)</code> 函数，输入 ( a ) 和 ( m ) 两个数组，分别求出各项数值并打印结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crt</span>(<span class="params">a, m</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(m)):</span><br><span class="line">            <span class="keyword">if</span> egcd(m[i], m[j])[<span class="number">0</span>] != <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;m[<span class="subst">&#123;i&#125;</span>]和m[<span class="subst">&#123;j&#125;</span>]不互素,不能直接利用中国剩余定理&quot;</span>)</span><br><span class="line">                sys.exit(<span class="number">1</span>)</span><br><span class="line">    M = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        M *= i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;m = <span class="subst">&#123;M&#125;</span>&quot;</span>)</span><br><span class="line">    M_j = [<span class="number">0</span>] * <span class="built_in">len</span>(m)</span><br><span class="line">    N_j = [<span class="number">0</span>] * <span class="built_in">len</span>(m)</span><br><span class="line">    x_j = [<span class="number">0</span>] * <span class="built_in">len</span>(m)</span><br><span class="line">    x_ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        M_j[j] = M // m[j]</span><br><span class="line">        N_j[j] = invmod(M_j[j], m[j])</span><br><span class="line">        x_j[j] = a[j] * M_j[j] * N_j[j] % M</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;M[<span class="subst">&#123;j&#125;</span>] = <span class="subst">&#123;M_j[j]&#125;</span>\nM[<span class="subst">&#123;j&#125;</span>]^-1 = <span class="subst">&#123;N_j[j]&#125;</span>\nx[<span class="subst">&#123;j&#125;</span>] = <span class="subst">&#123;x_j[j]&#125;</span>&quot;</span>)</span><br><span class="line">        x_ans += x_j[j]</span><br><span class="line">        x_ans %= M</span><br><span class="line">    <span class="keyword">return</span> x_ans % M</span><br></pre></td></tr></table></figure><h4 id="主函数">主函数</h4><p>读取文件中的数据，分别解析 ( a ) 和 ( m ) 数组，并调用 <code>crt</code> 函数进行计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;4.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">    lines = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br><span class="line">    a = [<span class="built_in">int</span>(line) <span class="keyword">for</span> line <span class="keyword">in</span> lines[:<span class="number">3</span>]]</span><br><span class="line">    m = [<span class="built_in">int</span>(line) <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">3</span>:<span class="number">6</span>]]</span><br><span class="line">    x = crt(a, m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;x = <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="四、数据分析">四、数据分析</h2><h3 id="测试数据与运行结果">测试数据与运行结果</h3><h4 id="对于-1-txt">对于 <code>1.txt</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4287515873132249290206743177914384561990566578711226941286419682287340749050657014821437224252742510554110503337292273093244157462381584685591016767785322030525556423396932770357076761886205280501197627765160017336467165781735019979121735426313741358</span><br><span class="line">9771213103492817551591736308167187727178414122203761280661360222386950001056708945835617029274862813823697577841711021589284847322704660314093793164431513466118083565545914124844865718601678585640515334042262368481197071154064487046068421730243918436</span><br><span class="line">2871231008911723824076489774982060049173360467932843727430035963211499257855033672890013137615901197366662729491707870527026785205880503044112360438626531884437395888361473482075216260556158042797849456731292280076916674319344428850262268951454742769</span><br><span class="line">523588466314748561196800547940629847378796004147993330931776203208323618661627286646160693474256366051855641456936957996916791238107540211391414024227284220353391110201587430764443793515845351571689819479217940971087824120375329864822917836240987338016618026960507206742219347185084380693186775229819</span><br><span class="line">317745883257029510336183192778003289012257294858665410453006329348840569846686869388239118060047339072195255137025252583106134251049564221071665049427912133921409213745644834553780586494509368977383172661987062891371874646381447459043958986576855501862553382811348208828172964166628664439116854493278</span><br><span class="line">274509651013765749900581458403181028928811855296015383658106227866104786947166444350049845567188043293317048016470662312247176561908274271045049786210266815953952092252708145204148233325749861787089768619491551224058050260278439653129762278559642431354065023465249888103710665657431717274663995421146</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m[1]和m[2]不互素,不能直接利用中国剩余定理</span><br></pre></td></tr></table></figure><h4 id="对于-2-txt">对于 <code>2.txt</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2723892435966726189283462276643000548302226198889141817271757889651791308558358920795889114701247042820953483001071963208633889856501082910099461214048359204822344882593461206652273529272346755366022660843454301688458652872256466505628217179694074094</span><br><span class="line">2574998818518266651220122107251540966447132827595609705116996618260293790734419076247444256252913539722381387572958613725900982296614578282669882909634235393122965926856917378784459675539995451129795956896012126332225498107074370341403693020317759418</span><br><span class="line">1781258431311982632509611410510400792618440693508399564824629398616965024476334843482876127346406898293301878103754249257328472698732075070095284373461813427012777487042219973876236132881332648134355962699370943697607785129797620664715009015407521642</span><br><span class="line">759559057169065570999365038186245069257166785574400967089713556997586313978702767033720062027310916321816725456168230628730432721763523085247850176915093667510118867133688773720665005106656294000822021407867602170116979006350351962115410840112983409275865316166602058575897774587037222032050625198776</span><br><span class="line">162096068855815576871200156982612105191973597814288277415871059518357860258523595254074620436189056715082088810045021486961809615856369594829505800620058919009041671018055868246962688383106910337278589526663076908482043347921324756884818583808332776724939914794568740995016696150714984320332832165639</span><br><span class="line">221565095752045847693974642381259072766160166741185970477021942423348168207374731906401091326965278115747898341405162270873799283241313819410812712020488498760003564364189286994891360176169449650229402226518150330938294146833925692827181229808371227478309250733697671916325016948939371162416317936664</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m[0]和m[1]不互素,不能直接利用中国剩余定理</span><br></pre></td></tr></table></figure><h4 id="对于-3-txt">对于 <code>3.txt</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">9627297126611174594522186713351637491244433834447229238430307159786950107250136874379769639524094482401960267574348651618425247869257869043925209428739949361336393570622010769855217975387876361864613203164797704720546119428340704360000321372125079451</span><br><span class="line">3368239602193026714994792600570855858637938975042620061387630778780542928245424087992306458841966330024770821112030902265998997268253438791767794086742829965256363777663260688838137020186571613597169435250709651247156388793983980734625262154786871249</span><br><span class="line">9998710312818046344741965494024275281792837383458797610964276251929744291966010433420065501069534288072000719966384862116781315396878264878225506588891085271739437315612072840823244230137551451832073695252719636345922452993935602737905493910007729373</span><br><span class="line">858965591728706423530311864597452473389568979454299710257413628272687981748566305677123933001010648857449475472117317710924545723205231784914795276636826867781542494530392050266688097787411462387564569946366372734004445404346335720435524740834791132820370057578926512094810495815016020866579264076589</span><br><span class="line">366047310809781584236826454375586522253024244215547391088400197400590448561225130055859938711550691842370297092970200272442715853500436351502510547208183430404757705676909484899400733434837764512565165408608277011211200399290438709664869935571120849289194196434871217206016776476885229737822799548497</span><br><span class="line">248988308048501980592472496030060787190255544508964420449149705972243053385845017852879586545253289642107087862508950446371961849575493137717610704043491971035499691602701547145350999437476962412738959026455512044796946218712762146613024038832960777009419158527491051855424828882137045359168294259229</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">m = 78287412980376778076356330343010712928504093286414501978056136421346923608214943588658577249413253906863855434149139814410874226604715450863516781068644239602736664460753109818735066304873954227519853772187144524675831599437550405806801280057386996727609166021245027468914572777539437303000444501504048570209220229678498506457906748094298324015001174909574665390550722854633113078215992470687106331683828240958675269114345085029335132922023910442782601343804459448240738645342407674106302379038415344421713369000206601558012539385859569521503791827711638045218891113192096568493855891249744256954140887267219553896082078832817346891055752997176740893479550830537555872631830660453602712896542818910263695754475316305359766376941161069335663899971097631919628234709234321017873779741832889295952146633411206068842200647171305828718652115555606614854351610831089729313987249619966900062564582790458857</span><br><span class="line">M[0] = 91141500584231646073509664268202103376425461137950468170960679074418203232198965978454323889094755473581549892088499813822736287803377193004618890770741451259217393112366126400897648208435770062330393483025404064027371010722604169384184966766057947010452190881808567624132394280027224798232248490686969124599610676474861261638871834392069263633302593216693666949218945969992488151914647624518567579653575266039683558517470888519866293866374927162698799789993562217395133745633874613057298575732959643258328874996616152992056018866134135319879761024113478291331671348374358912841179208704258275328813</span><br><span class="line">M[0]^-1 = 320547619181159049322077118411227037468064793575040608846075237755836487801700148417060649633206869993115048230380752832380479974566385261202288191346840879534492067708728283547597296595306916462267542618615501431674645605394548373808838756825120926783638559532566096931878831265545179835546789372264</span><br><span class="line">x[0] = 63761831873048043488707437323494892443821589645924158626227691821829807769341772126841657809332423164650868345656355197589623178597175713311253895913723254901662077555676313550361654060656463022394630803094183004307893442926672214343239393987208881962626515342421833278880768791776001996627788699599378063661428951030405983306791983736070264315929649817008298960421656582858000295830818374033000716176058504662443979721702554378206673890885504438848490653321511218895808248988766847460838976999636998444737300490643501653955668226611278961561883584637859871727549939122285874706695853642984283513160397079986509414860743282712841423599541009091132762204521701041424552165531908481367807864368157261738339011024247040868381463800181153994304152813083926164461654061610006689717708653041276773797783801648790673871119044838127725018729909448522992416331038908154910286989196407770692812106899349574459</span><br><span class="line">M[1] = 213872389356410939883171110393828339367097726987457315792740781843561533957969696863941853547082329261290208731728350965623176123993606589476237456325733938636326135401088469788341766520067291883866899673560260424025642561499630202808648922560040515931062715906757475127171391238795136363684202744189925453246422862897933707118572601308153643230917138947321953034226304316146263173359790713308085846690902099953901885122247440184238946095569769209540633465678529654073664265506529438757875301622518608718138915357407106502664208934558435852338712088148111500546140023369239437338106891432516476089881</span><br><span class="line">M[1]^-1 = 343826330536106960353061805122177953555914159110936313170560286502610601755924936251169628136107275506184388479957531650524010016219464217673334717398938107272517664007681354336946818629001750582409029904577881120965297425765775466066748893609205077900233414031147941984355363974492417453326969146315</span><br><span class="line">x[1] = 35473387307966623060435227526207454131287017473972731920099867085795393269268200807647555574010120093418012250150316162080615355792814565319621973220804769309548584754943037566384665281371268269671559366106249044676318078275525671076144454589046412195052737258202485574504477783763005431931007482153514827504112070350879502742173260942541221484291502403727503499572019829341890754823863152567554284072037323876987197386214431353047362035516416603595523808926636409673269358752087475944123355846074623871954153452083217760759523202189312615305373988262001067363572374305910752013385444740867209604666317474424434288275987903787132398086019045175199662304266815565067085517508478657539779196348922719773908681892936887487353832331408779451196024501834987466988238393042575210531255930204906567995193475758621539433356905773719267327298445782982540324482088031890950989996556480780385724295095528082929</span><br><span class="line">M[2] = 314422044930425753787986322934069696088918746488682683882672575592826395660214468557834291300881977059953634119334958917805399915538514934054133242076907030736447952341326631294732074595485309665758378246652521817854415633550693897963072823597299540874032658759055442778115326467268215317895856954097580723645997287745166271875370449399872731972755192023188604631936657442680823677142761426075898355918923785877348041953885157945497083946070166930607084052550155747868727943177822781825442120316771752259124115376938461518438926049011365544800168233861529992371023232092921550379377486172960827836733</span><br><span class="line">M[2]^-1 = 171186076079321078367101575960694921294374067879934648421488245907002475562684917105185920684716936273216380839736513957879874241450376581095332253869658903318243873822904296630267540815663416362709538720252781847727019819550604706714057535198675840876906732869052191429307881256733724106112724649496</span><br><span class="line">x[2] = 47200825634455050532312818099810268721618176371369899046298115321107152344004756989541002730626838019846887825238204935164180362103035511840169953065440436147120465585231396309556414635693177956708000061108343828821141006592264452831603228311134525870962212789941033537990174479116087640188307196063063784768086734613375651677067754888322066325187296090818178286051090001090617009146265496228315091709963626515815207477757184321085438121555815550954213139676451460145621100608747895789912476120799113753289235945611889364774276140189464398620226729810648885994621160099194586557506758182306784859330709991139621885807753398763213292528893030364981745386709090212399155101761411572747544497737739834126236926301916126369855722734652299816107803845714930934446141296229750277471721702350054220125998538261814972488362472736525243565427018163357251689722622426878699011478168329078613001651304312049219</span><br><span class="line">x = 68148631835092939005099152606501902368222690204852287614569537807385429774399786335371638864556127371051912986895736480423544669888310339607529041131324220755594463435097637607567667672846955021254336458121631353129520928356911932444185796830002823301032299369320324922460848277115657765746658876311908105724407526316162631268126251472635228110407273401979315355494043558657394981584954552141763760274231214096571115471329085023004341125933826150615626258120139640473960063007194545088572429928095391648267320888132007221476928183130486453983692474998871779866852360335294644783732165316414021023016537278331011692862405752445840223158700087454573276415946776281334920152971138258052418661912000905374788864743783749365824641925081163925944081189536212646267799041648011159846906543763348265966829182258021116950637776177066407192803257839256169576184138535834830974476671597662791475488716399247750</span><br></pre></td></tr></table></figure><h4 id="对于-4-txt">对于 <code>4.txt</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4295624200916103150599187894069568981644887527006022293335411265325330766209384042149064411907179821424044008998783005917891040115867971765387896882502372910534420366586969297740256508667912971220346963656236357992720027363453060989101521723818782859</span><br><span class="line">5048708579602446318345786079263805330041321937318356977713731438546230007240990016692471522814001533907319360690279621114614314033960765948096994997978898030493629876397052852607482295309726966711964115036814323557452116697775795013599746606308941699</span><br><span class="line">3596008781131805011469947008682729873414721821476767635020831688934235027100273960073060644233468675066081666974397611077160956117019314165266334949865339553955144752190049946668292832024262707189972278781623056371646171170037065247015908280526298099</span><br><span class="line">253268116941049462372755485294627845953395456491303414556526733075374137967004752504673449144127614535913543873030021468008726507050465022071707160741698808385761380642247594073913361295533275673179302652183682186833234185200977261250232230317956532527047423424409071712741825783736332529018918148163</span><br><span class="line">125248861531316255813195601224233646259612691753136401744012312139150529279621053123373479202484067233487585722100985297146237842513670859818330920681154364341465011756714318618809651568983662473459040332663903629238803126754073155288151349861846938331504036858910307146027842456534288216106730122837</span><br><span class="line">698855668303654763609354611237287260490079971863647816714075293967494108799939157241632182265896815845218861766490836254355441380776592281152436190044369477118275337292092410384500713140977087470037378083843253426645431017510956102035201863381656508487752007901934453758443979487225850241951137642259</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">m = 22168780348867171528948488543594791300889570117946595529607495373231382034508616731458480970224620909021667079453644961637539651867608550153454231110622098123829139715657196042438236320461852762940237131407534717478418516205574692699559122024646158088291023862838836800936731066493487351132547428189898512223610203328680646707788816893775115564239624216501867464765882220724274524724774184452430883121017321235694652884319431368920443431386802617987991110600809865687010919563113734239817324173081054598419957265168132116914229640083791071084712423477676610265275685983951965918677979500610328407489537774227024513958173006981388439440209243566375675196633237430607975232774090044896921558728965187714870541763254509770961580154255231609465440449008589013093448848607145499182159176478202756575907929718858873114546063206660878750226910009178496116384479400749146914511936056670489070659811817395629</span><br><span class="line">M[0] = 87530876829739938316222321171554745818518198149502424918412021513861776351117551320653502598133273315079967121338948648694839009408530719322997914554448286258476245493581894386487755341031986745292922341174213769934239655085796050463990085063499446712523431661098220935659056351978808806178678228380784295812134260743757040134199914382017985636755916737721795547290125878690641838390537897868815394311706169119610196966335953846968164663975444357454392519124033384897405376961858302274162186883427055117084284201293712464676956900636322993950089215871079893955789758278504906842218411054197632168783</span><br><span class="line">M[0]^-1 = 106103690019916658417780285614758894184393291283187640245041510410057420120895693784977049498331922780543489279621835812962923311335991594446483798048098214045984913203354219527731681505277375065692103994606507675923682922836102562644899271332133164808667125430191713114424322029633819073975843563047</span><br><span class="line">x[0] = 11529904910092211794708777313536463759734181675525855398311232613624581361044791848157673187984087828942264976084452887164426498581317075816115174416995715192585098624070050053044955486779656803996137366045189554596033258389494038459390355616565301238674393166064468298272220701319949177690655828215588083668260451756856136890269189574060457856632634253790001987146348622833429640004988438482939923256849122779321894589003949162749115781062026779523465885368185376306221989192936615580588927546876893810044327682704269796699608799792227348818903386487713602681448670726822072505643805742079504292641446727950362862554838089382552789185591841431541637024304459448134331987700094974473624919843515530309981045358443041141280767528091544096450115360551904341297396172331738761095723644694127301482636990614630131119315466000859773406760818543132999616814348890150633826160878069087728136754733888501661</span><br><span class="line">M[1] = 176997859124845308827073654081730807353583878165730595041585783923670239037352188227085770027784021016118976417121584776330808082900224105739218957022163015943537432575713646458108238475705448666848240754989161722873490008680242507495549799396847627285889505247060985199062700786676654523371015065115609945828686224799267674385795050932049669887321595668097105528570809324446166664864164308519324486723848510744562285844647344274656633669608712184942569521293548933012117116498287867252821198850326968766876864542076697791199469807640027411533673164540183115228523725723371039069547763133662252020217</span><br><span class="line">M[1]^-1 = 43099871028909216371616908875643260778675513073156218374064652173406965258937674954865561608797638050131480624577004104520432006636732276367686673654636368667869260874906381481728058058329979468355143884869951972371506224071871591869526220916066955665294561948491149284380394402970145507264517062588</span><br><span class="line">x[1] = 637983223256148573502603886920565838551398174405937952796359014741393904804513116677045571760338560261031824541054224879743163719119010019895506818134016461072851498685949140083496853465651646241537043814275626496922285578478281960313085700630508676132125062831096102800343622853249182606901604697963746809916879993417587937546810483000957727789753583635871473076407449819717675137505656667269476659816686019988544538352122890047376651201898366120461482974254343945038358785088657701627511052203188689345463951573896834443279097102942165235550511512890174130622947892169188870934777645471792451434223134688592176714117386818872872056513485429331089119534979193802541748405524478675174860941781123987093081319062901531051093852369165144567405722164287934380211315098959899827671023679720057720847983118232436323558008699969805695022061016503434320611181392004291869000219421957604657712559027679590</span><br><span class="line">M[2] = 31721543309046716916826956709116478069932767217494091911269201221189168624352559748640347775841896704395975693668800627542745391835258718285935050403529440497737736356899053352886909563029941307075345076769095069146884881981008604575634569105223405679345656801818869778777844218903912656392240517833380574311381422626719040288701382403284935586935758814630615783499767536005412900480995435888471433602865846542539186386857096627737975865147572507061900656231178881420927168336478674561238408611820756692155539417285018071241057683421925668991255573282200879969807589783948383602100948258285555898431</span><br><span class="line">M[2]^-1 = 165592398033830753047012925837936946080990788458660508576840156491536833493695774067168215987793323737332132960129098139191025491180021323050876628141140652466325110012977903716975947998703110454325807253712423333507448852259199046136163565803732891004123735908097863812713084147418544465685367018743</span><br><span class="line">x[2] = 11146319817431279803831914439933813295569195210199565873650576775331474684993506409706105283174682760340797044860862515134100529018220613518882324755076645817216759559098671339476217832603867379028284394380116996889278442222936243993903518040193490475511215497977318547705091204239081286171907090316231947988905308497896036481769961957917673074890910328249452584723924405139521044751171450891841154197006204640780298055269098954581362212434489280938082244538296400535424144615489051159375450709197911500229166695347923584911530644891164989295132575117764971629821367652748810702270621364312661872974620396535059376774538452930019407716111633068991597185788152677990033448867541554526234248576533020358585178423793173814232434015859296018196136178184901314154285054374664924582448468535017191561715617877178055663698493334802247540100597969943742231035023236805403790117168488158447075736056978482683</span><br><span class="line">x = 1145427601912468643094807096796051592965204942184763695150673030466067916334194643082343072694488240522426766032724665540730539451048149201438774879584279347045569966197474490166433852387323066325721672832047460503815469985333871714047837332743142302026709864034046147840924461918792295336917095039885266243472436919489114601797145121203973095073673949173458580180798257068393835168891361589619670992654692204396084298305739638457411213311611808594018502279926255099673573030400590201774565135196939401199001064457958099140188901702543432264874049640692138176617300287788106160171225251253630209560752484946989902085320922150056629518007716363488648132994353889318931952199070962778112470632864486940788763338044606715602715242064773649748216811892504576738443693198218086323683960430661794189292661891181749992025904828970947891656567520401680052076074118211182570766329922533290799543538077268305</span><br></pre></td></tr></table></figure><h2 id="五、思考与总结">五、思考与总结</h2><h2 id="问题一">问题一</h2><p>若正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>m</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>m</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">m_1, m_2, \ldots, m_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 不是两两互素，是否能直接用中国剩余定理求解？<br>例如，方程组：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>7</mn><mi>x</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≡</mo><mn>5</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>18</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>13</mn><mi>x</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≡</mo><mn>2</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>15</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}7x &amp;\equiv 5 \pmod{18} \\13x &amp;\equiv 2 \pmod{15}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">13</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">5</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">18</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">15</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>需要如何求解？</p><h3 id="答：">答：</h3><p>题目中给的方程并不是最简形式，首先需要将其拆分：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>7</mn><mi>x</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≡</mo><mn>5</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>18</mn><mo stretchy="false">)</mo><mspace width="1em"/><mo>⇒</mo><mspace width="1em"/><mn>7</mn><mi>x</mi><mo>≡</mo><mn>5</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>9</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mn>7</mn><mi>x</mi><mo>≡</mo><mn>5</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>13</mn><mi>x</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≡</mo><mn>2</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>15</mn><mo stretchy="false">)</mo><mspace width="1em"/><mo>⇒</mo><mspace width="1em"/><mn>13</mn><mi>x</mi><mo>≡</mo><mn>2</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mn>13</mn><mi>x</mi><mo>≡</mo><mn>2</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}7x &amp;\equiv 5 \pmod{18} \quad \Rightarrow \quad 7x \equiv 5 \pmod{9}, \quad 7x \equiv 5 \pmod{2} \\13x &amp;\equiv 2 \pmod{15} \quad \Rightarrow \quad 13x \equiv 2 \pmod{3}, \quad 13x \equiv 2 \pmod{5}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">13</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">5</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">18</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">7</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">5</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">9</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">7</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">5</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">15</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">13</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">13</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">5</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>化简后得到：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>x</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≡</mo><mn>4</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>5</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mi>x</mi><mo>≡</mo><mn>2</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>3</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><mi>x</mi><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}x &amp;\equiv 4 \pmod{5}, \quad x \equiv 2 \pmod{3}, \quad x \equiv 1 \pmod{2}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5em;vertical-align:-0.5em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1em;"><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1em;"><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">4</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">5</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>此时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 数组中元素两两互素，可以使用中国剩余定理求解，最终结果为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>≡</mo><mn>29</mn><mspace></mspace><mspace width="1em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mn>30</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x \equiv 29 \pmod{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4637em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">29</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord">30</span><span class="mclose">)</span></span></span></span></span></p><h1>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#中国剩余定理代码</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> b, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        g, x1, y1 = egcd(b % a, a)</span><br><span class="line">        x = y1 - (b // a) * x1</span><br><span class="line">        y = x1</span><br><span class="line">        <span class="keyword">return</span> g, x, y</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invmod</span>(<span class="params">a, b</span>):</span><br><span class="line">    g, x, y = egcd(a, b)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;模逆不存在&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % b</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crt</span>(<span class="params">a,m</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(m)):</span><br><span class="line">            <span class="keyword">if</span> egcd(m[i],m[j])[<span class="number">0</span>] != <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;m[<span class="subst">&#123;i&#125;</span>]和m[<span class="subst">&#123;j&#125;</span>]不互素,不能直接利用中国剩余定理&quot;</span>.<span class="built_in">format</span>(i,j))</span><br><span class="line">                sys.exit(<span class="number">1</span>)</span><br><span class="line">    M = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        M *= i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;m = <span class="subst">&#123;M&#125;</span>&quot;</span>.<span class="built_in">format</span>(M))</span><br><span class="line">    M_j = [<span class="number">0</span>]*<span class="built_in">len</span>(m)</span><br><span class="line">    N_j = [<span class="number">0</span>]*<span class="built_in">len</span>(m)</span><br><span class="line">    x_j = [<span class="number">0</span>]*<span class="built_in">len</span>(m)</span><br><span class="line">    x_ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        M_j[j] = M//m[j]</span><br><span class="line">        N_j[j] = invmod(M_j[j],m[j])</span><br><span class="line">        x_j[j] = a[j]*M_j[j]*N_j[j]%M</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;M[<span class="subst">&#123;j&#125;</span>] = <span class="subst">&#123;M_j[j]&#125;</span>\nM[<span class="subst">&#123;j&#125;</span>]^-1 = <span class="subst">&#123;N_j[j]&#125;</span>\nx[<span class="subst">&#123;j&#125;</span>] = <span class="subst">&#123;x_j[j]&#125;</span>&quot;</span>.<span class="built_in">format</span>(j))</span><br><span class="line">        x_ans += x_j[j]</span><br><span class="line">        x_ans %= M</span><br><span class="line">    <span class="keyword">return</span> x_ans%M</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;4.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">    lines = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br><span class="line">    a = [<span class="built_in">int</span>(line) <span class="keyword">for</span> line <span class="keyword">in</span> lines[:<span class="number">3</span>]]</span><br><span class="line">    m = [<span class="built_in">int</span>(line) <span class="keyword">for</span> line <span class="keyword">in</span> lines[<span class="number">3</span>:<span class="number">6</span>]]</span><br><span class="line">    x = crt(a,m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;x = <span class="subst">&#123;x&#125;</span>&quot;</span>.<span class="built_in">format</span>(x))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 信息安全基础与密码学综合实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my-crypto-3</title>
      <link href="/Blog/2024/11/02/my-crypto-3/"/>
      <url>/Blog/2024/11/02/my-crypto-3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-欧拉计划-link">1.欧拉计划(<a href="https://projecteuler.net/problem=182">link</a>)</h2><p>本题需要计算所有满足条件e的总和，需要在e加密的情况下为加密的信息数目是最小的。所以首先我们需要编写计算最大公约数的函数<code>gcd()</code>这里运用欧几里得方法得到，减少时间复杂度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">if</span> b ==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> gcd(b,a%b)</span><br></pre></td></tr></table></figure><p>由题目知道未加密信息满足算式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mi>e</mi></msup><mo>≡</mo><mi>m</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">m^{e}\equiv m mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">mm</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">n</span></span></span></span>则未加密的信息数目就是该算式解的个数。又<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">n = p*q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6597em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>可以得到解个数公式该方程解个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>g</mi><mi>c</mi><mi>d</mi><mtext>⁡</mtext><mo stretchy="false">(</mo><mi>e</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>g</mi><mi>c</mi><mi>d</mi><mtext>⁡</mtext><mo stretchy="false">(</mo><mi>e</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(gcd⁡(e-1,p-1)+1)*(gcd⁡(e-1,q-1)+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mord">⁡</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mord">⁡</span><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，由此我们能够遍历所有的e的可能，并且记录下对应未加密信息数目。最后统计出最小的未加密信息数值，累加得到所有满足条件的e。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p=<span class="number">1009</span></span><br><span class="line">    q=<span class="number">3643</span></span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    e_state = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,phi):</span><br><span class="line">        <span class="keyword">if</span> gcd(e,phi)==<span class="number">1</span>:</span><br><span class="line">            e_state[e]=(gcd(e-<span class="number">1</span>,p-<span class="number">1</span>)+<span class="number">1</span>)*(gcd(e-<span class="number">1</span>,q-<span class="number">1</span>)+<span class="number">1</span>)</span><br><span class="line">    min_result = <span class="built_in">min</span>(e_state.values())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;未加密信息的数目为最小值:&quot;</span>,min_result)</span><br><span class="line">    e_sum = <span class="built_in">sum</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> e_state <span class="keyword">if</span> e_state[i] == min_result])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;e的和&quot;</span>,e_sum)</span><br></pre></td></tr></table></figure><p>最后运行程序得到<strong>答案</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">未加密信息的数目为最小值: 9</span><br><span class="line">e的和 399788195976</span><br></pre></td></tr></table></figure><h2 id="2-实施RSA（link）">2.实施RSA（<a href="https://www.cryptopals.com/sets/5/challenges/39">link</a>）</h2><p>本题要我们实施RSA密码，首先需要编写一个生成大素数的函数，但是在题目中说生成大素数不是重点可以运用已经存在库函数实现。所以我使用<code>getPrime(bits)</code>来得到随机大素数，需要引用如下库函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br></pre></td></tr></table></figure><p>首先我们需要编写一个运算逆的函数<code>invmod(a, b)</code>，题目中提示运用欧几里得方法来运算。首先我们得到a和b的最大公约数，在ab互素的情况下得到ax+by=1中x和y的值。进而知道x%b就是a对模b的逆。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">invmod</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> b, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        g, x1, y1 = egcd(b % a, a)</span><br><span class="line">        x = y1 - (b // a) * x1</span><br><span class="line">        y = x1</span><br><span class="line">        <span class="keyword">return</span> g, x, y</span><br><span class="line"></span><br><span class="line">    g, x, y = egcd(a, b)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;模逆不存在&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % b</span><br></pre></td></tr></table></figure><p>然后我们需要编写生成公钥和私钥的函数<code>def generate_rsa_keys(bits=1024)</code>这里假设生成的大素数长度为1024bits。需要注意是的生成的pq必须满足et和e要互素，否则需要提示‘e和et不互素，需要重新生成p和q’重新运行本程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_rsa_keys</span>(<span class="params">bits=<span class="number">1024</span></span>):</span><br><span class="line">    p = getPrime(bits)</span><br><span class="line">    q = getPrime(bits)</span><br><span class="line">    e = <span class="number">3</span>  </span><br><span class="line">    n = p * q</span><br><span class="line">    et = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> et % e == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;e和et不互素，需要重新生成p和q&quot;</span>)</span><br><span class="line">    d = invmod(e,et)</span><br><span class="line">    <span class="keyword">return</span> (e,n),(d,n)</span><br></pre></td></tr></table></figure><p>然后就是RSA的加密和解密函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_e</span>(<span class="params">m,public_key</span>):</span><br><span class="line">    e,n = public_key</span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RSA_d</span>(<span class="params">c,private_key</span>):</span><br><span class="line">    d,n = private_key</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">    <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure><p>最后需要验证我们的函数，首先验证题目中提供对数字‘42’的加密和解密，编写如下主函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    public_key, private_key = generate_rsa_keys(bits=<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Public Key:&quot;</span>, public_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Private Key:&quot;</span>, private_key)</span><br><span class="line">    m = <span class="number">42</span></span><br><span class="line">    c = RSA_e(m,public_key)</span><br><span class="line">    m = RSA_d(c,private_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Encrypted message:&quot;</span>,c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted message:&quot;</span>,m)</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Public Key: (3,18584674673132354443799672761999941195666000202227614111637155188539270102977177731778018459960150317179869096463577703162143774936243688426920345316552503579131340867655377725303228596377386065225388154913735169967323835455241628652156536489258197597460873974039760487200652925252344940958437709182291610007034125308781140179215153252229512228360941259630163260655799104054957802710229055844388887031905568258883483304070344807372760151934114113984889764718190341459171281490147513254095481591774318259828757818433860151920192737540296635075104425833323314600516252161361510537724590619394519884470682648995016113887)</span><br><span class="line">Private Key: (12389783115421569629199781841333294130444000134818409407758103459026180068651451821185345639973433544786579397642385135441429183290829125617946896877701669052754227245103585150202152397584924043483592103275823446644882556970161085768104357659505465064973915982693173658133768616834896627305625139454861073337838844392286656582400222672086962170281752665081946086647483823131098260696325149265363477667565205536882892789035367095109247178601111866806090173693393156455850235147511096016082968414410933328693661222516965388865455131890742039547494515108404863454559206641078024375171187968771304813410281675569739684491, 18584674673132354443799672761999941195666000202227614111637155188539270102977177731778018459960150317179869096463577703162143774936243688426920345316552503579131340867655377725303228596377386065225388154913735169967323835455241628652156536489258197597460873974039760487200652925252344940958437709182291610007034125308781140179215153252229512228360941259630163260655799104054957802710229055844388887031905568258883483304070344807372760151934114113984889764718190341459171281490147513254095481591774318259828757818433860151920192737540296635075104425833323314600516252161361510537724590619394519884470682648995016113887)</span><br><span class="line">Encrypted message: 74088</span><br><span class="line">Decrypted message: 42</span><br></pre></td></tr></table></figure><p>现在测试对一个字符串‘Happy Holloween!’的加解密结果，编写如下主函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    public_key, private_key = generate_rsa_keys(bits=<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Public Key:&quot;</span>, public_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Private Key:&quot;</span>, private_key)</span><br><span class="line">    message = <span class="string">&quot;Happy Holloween!&quot;</span></span><br><span class="line">    m = <span class="built_in">int</span>.from_bytes(message.encode(<span class="string">&#x27;utf-8&#x27;</span>), byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    c = RSA_e(m,public_key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Encrypted message:&quot;</span>,c)</span><br><span class="line">    m = RSA_d(c,private_key)</span><br><span class="line">    message = m.to_bytes((m.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, byteorder=<span class="string">&#x27;big&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted message:&quot;</span>,message)</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Public Key: (3, 18746808571300120504075819075682594108587535388098754677870678403048294162399846334137445538730775144599084227460865632005107133341672067110771050673013583813667197683875501302973912467166141154341320814285678147761034215354099126591602306404085973955963843526566924290314499362955841196440900414874353607804365254706041430929565530836774408396058906536328668430766073670852859439307267025218730395514185697403199973733802260324197180412572479037624518165071365862506194984607606206276475436694257745689639894210738259160828771680605477570068261833446369430881080564601723636695474262854104359084128262572628557179013)</span><br><span class="line">Private Key: (12497872380866747002717212717121729405725023592065836451913785602032196108266564222758297025820516763066056151640577088003404755561114711407180700448675722542444798455917000868649274978110760769560880542857118765174022810236066084394401537602723982637309229017711282860209666241970560797627266943249569071869393919769818227415018394576223101062948188806376352414567503277949919018535889622512491130511685307096516768916314421416945739691371071076417554540102038686665301000050159474220726679317018289250423738605246696532022745489211634236528769821582503745462361003025656079851791180146414307639207005583822966476907, 18746808571300120504075819075682594108587535388098754677870678403048294162399846334137445538730775144599084227460865632005107133341672067110771050673013583813667197683875501302973912467166141154341320814285678147761034215354099126591602306404085973955963843526566924290314499362955841196440900414874353607804365254706041430929565530836774408396058906536328668430766073670852859439307267025218730395514185697403199973733802260324197180412572479037624518165071365862506194984607606206276475436694257745689639894210738259160828771680605477570068261833446369430881080564601723636695474262854104359084128262572628557179013)</span><br><span class="line">Encrypted message: 890564482417655822788709386116389927760915707730126623223467631024461475735568125139054708085662317206414437078625</span><br><span class="line">Decrypted message: Happy Holloween!</span><br></pre></td></tr></table></figure><h2 id="实验总结">实验总结</h2><p>本次实验我充分了解了RSA算法的运行过程，并且更加熟悉了运用公钥和私钥加解密的程序编写。在第一个实验里面复习了计算解个数的公式。在第二个实验里面我起初的运行速度很慢，后来仔细读题发现模逆运算中面对大素数的运算开销很大需要运用欧几里得算法来减少时间复杂度。在实验二对字符串加解密的时候需要把字符串中的字节转换为整数再进行运算。最后解密时需要把整数转换为二进制向上取整进而算出需要多少个字节表示，再把整数转换为字节数组再将字节数组解码为 UTF-8 编码的字符串得到最终答案。</p><h2 id="源代码连接">源代码连接</h2><p><a href="https://github.com/cool-chicken/cryptography-exp/tree/main/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C%E4%B8%89">https://github.com/cool-chicken/cryptography-exp/tree/main/密码学实验三</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 密码学实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my-crypto-2</title>
      <link href="/Blog/2024/10/14/my-crypto-2/"/>
      <url>/Blog/2024/10/14/my-crypto-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-European-ePassport">1.European ePassport</h2><p>MTC3 AES key — encoded in the machine readable zone of a European ePassport (<a href="https://www.mysterytwisterc3.org/en/challenges/level-2/aes-key--encoded-in-the-machine-readable-zone-of-a-european-epassport">link</a>)<br>题目需要破解一个欧洲护照，图片中给出了护照的一部分内容，和一个未知字符。已知初始化矢量即IV为零，填充为01-00。所以首先我们需要找到缺失的字符是什么。根据规则定义了<code>unknown_number()</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unknown_number</span>():</span><br><span class="line">    number = <span class="string">&quot;111116&quot;</span></span><br><span class="line">    weight = <span class="string">&quot;731&quot;</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(number)):</span><br><span class="line">        total += <span class="built_in">int</span>(number[i]) * <span class="built_in">int</span>(weight[i % <span class="number">3</span>])</span><br><span class="line">    <span class="keyword">return</span> total % <span class="number">10</span>  <span class="comment">#7</span></span><br></pre></td></tr></table></figure><p>经过调用函数我们找到缺失的字符是<code>7</code>所以我们能够补齐护照得到<code>12345678&lt;8&lt;&lt;&lt;1110182&lt;1111167&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;4</code>。然后我们利用这个护照序列<br>计算出k_seed。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_kseed</span>():</span><br><span class="line">    MRZ_information = <span class="string">&quot;12345678&lt;8&lt;&lt;&lt;1110182&lt;1111167&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;4&quot;</span></span><br><span class="line">    H_information = hashlib.sha1((MRZ_information[:<span class="number">10</span>] + MRZ_information[<span class="number">13</span>:<span class="number">20</span>] + MRZ_information[<span class="number">21</span>:<span class="number">28</span>]).encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> H_information[:<span class="number">32</span>]</span><br></pre></td></tr></table></figure><p>从 K_seed 计算出 Ka 和 Kb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_ka_kb</span>(<span class="params">K_seed</span>):</span><br><span class="line">    d = K_seed + <span class="string">&quot;00000001&quot;</span></span><br><span class="line">    H_d = hashlib.sha1(binascii.unhexlify(d)).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> H_d[:<span class="number">16</span>], H_d[<span class="number">16</span>:<span class="number">32</span>]</span><br></pre></td></tr></table></figure><p>分别对Ka和Kb进行奇偶校验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parity_check</span>(<span class="params">hex_str</span>):</span><br><span class="line">    binary_str = <span class="built_in">bin</span>(<span class="built_in">int</span>(hex_str, <span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">64</span>)</span><br><span class="line">    k_list = [(byte := binary_str[i:i + <span class="number">7</span>]) + (<span class="string">&#x27;1&#x27;</span> <span class="keyword">if</span> byte.count(<span class="string">&#x27;1&#x27;</span>) % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_str), <span class="number">8</span>)]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(k_list), <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>得到key之后解密密文删掉填充得到<strong>最终答案</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Key: ea8645d97ff725a898942aa280c43179</span><br><span class="line">Decrypted message: Herzlichen Glueckwunsch. Sie haben die Nuss geknackt. Das Codewort lautet: Kryptographie!</span><br></pre></td></tr></table></figure><h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">text</span>):</span><br><span class="line">    padding_len = AES.block_size - <span class="built_in">len</span>(text) % AES.block_size</span><br><span class="line">    padding = <span class="string">b&#x27;\x01&#x27;</span> + <span class="string">b&#x27;\x00&#x27;</span> * (padding_len - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> text + padding</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">return</span> text.rstrip(<span class="string">b&#x27;\x00&#x27;</span>).rstrip(<span class="string">b&#x27;\x01&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unknown_number</span>():</span><br><span class="line">    number = <span class="string">&quot;111116&quot;</span></span><br><span class="line">    weight = <span class="string">&quot;731&quot;</span></span><br><span class="line">    total = <span class="built_in">sum</span>(<span class="built_in">int</span>(number[i]) * <span class="built_in">int</span>(weight[i % <span class="number">3</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(number)))</span><br><span class="line">    <span class="keyword">return</span> total % <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_kseed</span>():</span><br><span class="line">    MRZ_information = <span class="string">&quot;12345678&lt;8&lt;&lt;&lt;1110182&lt;1111167&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;4&quot;</span></span><br><span class="line">    H_information = hashlib.sha1((MRZ_information[:<span class="number">10</span>] + MRZ_information[<span class="number">13</span>:<span class="number">20</span>] + MRZ_information[<span class="number">21</span>:<span class="number">28</span>]).encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> H_information[:<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_ka_kb</span>(<span class="params">K_seed</span>):</span><br><span class="line">    d = K_seed + <span class="string">&quot;00000001&quot;</span></span><br><span class="line">    H_d = hashlib.sha1(binascii.unhexlify(d)).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> H_d[:<span class="number">16</span>], H_d[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parity_check</span>(<span class="params">hex_str</span>):</span><br><span class="line">    binary_str = <span class="built_in">bin</span>(<span class="built_in">int</span>(hex_str, <span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">64</span>)</span><br><span class="line">    k_list = [(byte := binary_str[i:i + <span class="number">7</span>]) + (<span class="string">&#x27;1&#x27;</span> <span class="keyword">if</span> byte.count(<span class="string">&#x27;1&#x27;</span>) % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_str), <span class="number">8</span>)]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(k_list), <span class="number">2</span>))[<span class="number">2</span>:].zfill(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_message</span>(<span class="params">encrypted_text</span>):</span><br><span class="line">    K_seed = calculate_kseed()</span><br><span class="line">    ka, kb = calculate_ka_kb(K_seed)</span><br><span class="line">    key = parity_check(ka) + parity_check(kb)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key: <span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ciphertext = base64.b64decode(encrypted_text)</span><br><span class="line">    IV = <span class="string">&#x27;0&#x27;</span> * <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    cipher = AES.new(binascii.unhexlify(key), AES.MODE_CBC, binascii.unhexlify(IV))</span><br><span class="line">    decrypted_padded = cipher.decrypt(ciphertext)</span><br><span class="line">    decrypted_message = unpad(decrypted_padded).decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Decrypted message: <span class="subst">&#123;decrypted_message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(unknown_number())</span><br><span class="line">    encrypted_text = <span class="string">&#x27;9MgYwmuPrjiecPMx61O6zIuy3MtIXQQ0E59T3xB6u0Gyf1gYs2i3K9Jxaa0zj4gTMazJuApwd6+jdyeI5iGHvhQyDHGVlAuYTgJrbFDrfB22Fpil2NfNnWFBTXyf7SDI&#x27;</span></span><br><span class="line">    decrypt_message(encrypted_text)</span><br></pre></td></tr></table></figure><h2 id="2-Crypto-Challenge-Set-2">2. Crypto Challenge Set 2</h2><h3 id="1-Implement-PKCS-7-padding">(1)Implement PKCS#7 padding</h3><p>如题目所述就是应用PKCS#7这种填充方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pkcs7_pad</span>(<span class="params">text, block_size</span>):</span><br><span class="line">    padding_len = block_size - (<span class="built_in">len</span>(text) % block_size)</span><br><span class="line">    padding = <span class="built_in">bytes</span>([padding_len] * padding_len)</span><br><span class="line">    <span class="keyword">return</span> text + padding</span><br></pre></td></tr></table></figure><h3 id="2-Implement-CBC-mode">(2)Implement CBC mode</h3><p>首先需要按照题目所述写一个ECB函数如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_decrypt</span>(<span class="params">cipher_text, key</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> cipher.decrypt(cipher_text)</span><br></pre></td></tr></table></figure><p>因为这个是基于CBC的密码所以说要写一个解密CBC的函数并且输出去除PKCS#7填充的明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cbc_decrypt</span>(<span class="params">cipher_text, key, iv</span>):</span><br><span class="line">    block_size = <span class="built_in">len</span>(key)</span><br><span class="line">    plain_text = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    previous_block = iv</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher_text), block_size):</span><br><span class="line">        block = cipher_text[i:i + block_size]</span><br><span class="line">        decrypted_block = ecb_decrypt(block, key)</span><br><span class="line">        decrypted_block = xor_bytes(decrypted_block, previous_block)</span><br><span class="line">        plain_text += decrypted_block</span><br><span class="line">        previous_block = block</span><br><span class="line">    <span class="keyword">return</span> pkcs7_unpad(plain_text)</span><br></pre></td></tr></table></figure><p>最后写出我们的 <code>main</code>函数运算，输入已知的key<code>'YELLOW SUBMARINE'</code>和16位空IV<br>以及读取密文文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    key = <span class="string">b&#x27;YELLOW SUBMARINE&#x27;</span></span><br><span class="line">    iv = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">16</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;2_2.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        ciphertext = base64.b64decode(f.read())</span><br><span class="line">    plain_text = cbc_decrypt(ciphertext, key, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;plaintext: <span class="subst">&#123;plain_text.decode()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过调用函数能够得到<strong>最终答案</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">I&#x27;m back and I&#x27;m ringin&#x27; the bell </span><br><span class="line">A rockin&#x27; on the mike while the fly girls yell </span><br><span class="line">In ecstasy in the back of me </span><br><span class="line">Well that&#x27;s my DJ Deshay cuttin&#x27; all them Z&#x27;s </span><br><span class="line">Hittin&#x27; hard and the girlies goin&#x27; crazy </span><br><span class="line">Vanilla&#x27;s on the mike, man I&#x27;m not lazy. </span><br><span class="line"></span><br><span class="line">I&#x27;m lettin&#x27; my drug kick in </span><br><span class="line">It controls my mouth and I begin </span><br><span class="line">To just let it flow, let my concepts go </span><br><span class="line">My posse&#x27;s to the side yellin&#x27;, Go Vanilla Go! </span><br><span class="line"></span><br><span class="line">Smooth &#x27;cause that&#x27;s the way I will be </span><br><span class="line">And if you don&#x27;t give a damn, then </span><br><span class="line">Why you starin&#x27; at me </span><br><span class="line">So get off &#x27;cause I control the stage </span><br><span class="line">There&#x27;s no dissin&#x27; allowed </span><br><span class="line">I&#x27;m in my own phase </span><br><span class="line">The girlies sa y they love me and that is ok </span><br><span class="line">And I can dance better than any kid n&#x27; play </span><br><span class="line"></span><br><span class="line">Stage 2 -- Yea the one ya&#x27; wanna listen to </span><br><span class="line">It&#x27;s off my head so let the beat play through </span><br><span class="line">So I can funk it up and make it sound good </span><br><span class="line">1-2-3 Yo -- Knock on some wood </span><br><span class="line">For good luck, I like my rhymes atrocious </span><br><span class="line">Supercalafragilisticexpialidocious </span><br><span class="line">I&#x27;m an effect and that you can bet </span><br><span class="line">I can take a fly girl and make her wet. </span><br><span class="line"></span><br><span class="line">I&#x27;m like Samson -- Samson to Delilah </span><br><span class="line">There&#x27;s no denyin&#x27;, You can try to hang </span><br><span class="line">But you&#x27;ll keep tryin&#x27; to get my style </span><br><span class="line">Over and over, practice makes perfect </span><br><span class="line">But not if you&#x27;re a loafer. </span><br><span class="line"></span><br><span class="line">You&#x27;ll get nowhere, no place, no time, no girls </span><br><span class="line">Soon -- Oh my God, homebody, you probably eat </span><br><span class="line">Spaghetti with a spoon! Come on and say it! </span><br><span class="line"></span><br><span class="line">VIP. Vanilla Ice yep, yep, I&#x27;m comin&#x27; hard like a rhino </span><br><span class="line">Intoxicating so you stagger like a wino </span><br><span class="line">So punks stop trying and girl stop cryin&#x27; </span><br><span class="line">Vanilla Ice is sellin&#x27; and you people are buyin&#x27; </span><br><span class="line">&#x27;Cause why the freaks are jockin&#x27; like Crazy Glue </span><br><span class="line">Movin&#x27; and groovin&#x27; trying to sing along </span><br><span class="line">All through the ghetto groovin&#x27; this here song </span><br><span class="line">Now you&#x27;re amazed by the VIP posse. </span><br><span class="line"></span><br><span class="line">Steppin&#x27; so hard like a German Nazi </span><br><span class="line">Startled by the bases hittin&#x27; ground </span><br><span class="line">There&#x27;s no trippin&#x27; on mine, I&#x27;m just gettin&#x27; down </span><br><span class="line">Sparkamatic, I&#x27;m hangin&#x27; tight like a fanatic </span><br><span class="line">You trapped me once and I thought that </span><br><span class="line">You might have it </span><br><span class="line">So step down and lend me your ear </span><br><span class="line">&#x27;89 in my time! You, &#x27;90 is my year. </span><br><span class="line"></span><br><span class="line">You&#x27;re weakenin&#x27; fast, YO! and I can tell it </span><br><span class="line">Your body&#x27;s gettin&#x27; hot, so, so I can smell it </span><br><span class="line">So don&#x27;t be mad and don&#x27;t be sad </span><br><span class="line">&#x27;Cause the lyrics belong to ICE, You can call me Dad </span><br><span class="line">You&#x27;re pitchin&#x27; a fit, so step back and endure </span><br><span class="line">Let the witch doctor, Ice, do the dance to cure </span><br><span class="line">So come up close and don&#x27;t be square </span><br><span class="line">You wanna battle me -- Anytime, anywhere </span><br><span class="line"></span><br><span class="line">You thought that I was weak, Boy, you&#x27;re dead wrong </span><br><span class="line">So come on, everybody and sing this song </span><br><span class="line"></span><br><span class="line">Say -- Play that funky music Say, go white boy, go white boy go </span><br><span class="line">play that funky music Go white boy, go white boy, go </span><br><span class="line">Lay down and boogie and play that funky music till you die. </span><br><span class="line"></span><br><span class="line">Play that funky music Come on, Come on, let me hear </span><br><span class="line">Play that funky music white boy you say it, say it </span><br><span class="line">Play that funky music A little louder now </span><br><span class="line">Play that funky music, white boy Come on, Come on, Come on </span><br><span class="line">Play that funky music</span><br></pre></td></tr></table></figure><p>（（（貌似是一段歌词</p><h3 id="3-An-ECB-CBC-detection-oracle">(3)An ECB/CBC detection oracle</h3><p>按照题目意思首先生成随机AES密钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_aes_key</span>():</span><br><span class="line">    <span class="keyword">return</span> os.urandom(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>之后创建一个加密oracle，在明文之前和之后附加随机字节，然后使用ECB或CBC模式随机加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encryption_oracle</span>(<span class="params">input_data</span>):</span><br><span class="line">    key = generate_random_aes_key()</span><br><span class="line">    prepend = os.urandom(random.randint(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line">    append = os.urandom(random.randint(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line">    plain_text = prepend + input_data + append</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">0</span>:<span class="comment"># 使用ECB模式</span></span><br><span class="line">        cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        padded_text = pkcs7_pad(plain_text, AES.block_size)</span><br><span class="line">        encrypted = cipher.encrypt(padded_text)</span><br><span class="line">        mode = <span class="string">&quot;ECB&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:<span class="comment"># 使用CBC模式</span></span><br><span class="line">        iv = os.urandom(AES.block_size)</span><br><span class="line">        encrypted = cbc_encrypt(plain_text, key, iv)</span><br><span class="line">        mode = <span class="string">&quot;CBC&quot;</span></span><br><span class="line">    <span class="keyword">return</span> encrypted, mode</span><br></pre></td></tr></table></figure><p>最后编写一个函数来检测使用的加密模式是ECB还是CBC，这里用在ECB模式下，相同的明文块会生成相同的密文块而CBC模式下，每个明文块在加密前会与前一个密文块进行异或操作，使得相同的明文块生成不同的密文块。所以运用这个不同来判断是什么模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">detect_encryption_mode</span>(<span class="params">encrypted_data</span>):</span><br><span class="line">    block_size = AES.block_size</span><br><span class="line">    blocks = [encrypted_data[i:i + block_size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encrypted_data), block_size)]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(blocks)) != <span class="built_in">len</span>(blocks):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ECB&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CBC&quot;</span></span><br></pre></td></tr></table></figure><p>最后调用<code>main</code>函数，这里的明文是三块一样的就可以用上吗的方法判断了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    key = <span class="string">b&#x27;YELLOW SUBMARINE&#x27;</span></span><br><span class="line">    iv = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">16</span> * <span class="number">3</span></span><br><span class="line">    plain_text = <span class="string">b&quot;\xFF&quot;</span> * <span class="number">16</span> * <span class="number">3</span></span><br><span class="line">    encrypted, mode = encryption_oracle(plain_text)</span><br><span class="line">    detected_mode = detect_encryption_mode(encrypted)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Actual mode: <span class="subst">&#123;mode&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Detected mode: <span class="subst">&#123;detected_mode&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-Byte-at-a-time-ECB-decryption-Simple">(4)Byte-at-a-time ECB decryption (Simple)</h3><p>就是攻击函数就是写一堆A然后把不知道的放在最后，像这样“AAAT”A已知T未知的数据块进行加密，并将得到的密文存储。然后，你向oracle请求加密“AAAi”的数据块识别第一个目标字节，当返回的密文与之前存储密文相同时，知道字节i就是目标字节T。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">UNKNOWN_STRING = base64.b64decode(</span><br><span class="line">    <span class="string">b&quot;Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg&quot;</span></span><br><span class="line">    <span class="string">b&quot;aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBq&quot;</span></span><br><span class="line">    <span class="string">b&quot;dXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUg&quot;</span></span><br><span class="line">    <span class="string">b&quot;YnkK&quot;</span></span><br><span class="line">)</span><br><span class="line">KEY = Random.new().read(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">data, block_size=<span class="number">16</span></span>):</span><br><span class="line">    padding_len = block_size - <span class="built_in">len</span>(data) % block_size</span><br><span class="line">    <span class="keyword">return</span> data + <span class="built_in">bytes</span>([padding_len] * padding_len)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encryption_oracle</span>(<span class="params">your_string</span>):</span><br><span class="line">    plaintext = pad(your_string + UNKNOWN_STRING)</span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_block_size</span>():</span><br><span class="line">    initial_len = <span class="built_in">len</span>(encryption_oracle(<span class="string">b&quot;&quot;</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">        data = <span class="string">b&quot;A&quot;</span> * i</span><br><span class="line">        new_len = <span class="built_in">len</span>(encryption_oracle(data))</span><br><span class="line">        <span class="keyword">if</span> new_len != initial_len:</span><br><span class="line">            <span class="keyword">return</span> new_len - initial_len</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_mode</span>(<span class="params">cipher</span>):</span><br><span class="line">    block_size = <span class="number">16</span></span><br><span class="line">    blocks = [cipher[i:i + block_size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher), block_size)]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ECB&quot;</span> <span class="keyword">if</span> <span class="built_in">len</span>(blocks) &gt; <span class="built_in">len</span>(<span class="built_in">set</span>(blocks)) <span class="keyword">else</span> <span class="string">&quot;not ECB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ecb_decrypt</span>(<span class="params">block_size</span>):</span><br><span class="line">    known_bytes = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        block_index = <span class="built_in">len</span>(known_bytes) // block_size</span><br><span class="line">        block_offset = block_size - <span class="number">1</span> - (<span class="built_in">len</span>(known_bytes) % block_size)</span><br><span class="line">        prefix = <span class="string">b&quot;A&quot;</span> * block_offset</span><br><span class="line">        target_block = encryption_oracle(prefix)[: (block_index + <span class="number">1</span>) * block_size]</span><br><span class="line"></span><br><span class="line">        found = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            guess = prefix + known_bytes + <span class="built_in">bytes</span>([i])</span><br><span class="line">            <span class="keyword">if</span> encryption_oracle(guess)[: (block_index + <span class="number">1</span>) * block_size] == target_block:</span><br><span class="line">                known_bytes += <span class="built_in">bytes</span>([i])</span><br><span class="line">                found = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Decrypted text: <span class="subst">&#123;known_bytes.decode(<span class="string">&#x27;ascii&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    block_size = detect_block_size()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Detected block size: <span class="subst">&#123;block_size&#125;</span>&quot;</span>)</span><br><span class="line">    cipher = encryption_oracle(<span class="string">b&quot;A&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    mode = detect_mode(cipher)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Detected mode: <span class="subst">&#123;mode&#125;</span>&quot;</span>)</span><br><span class="line">    ecb_decrypt(block_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rollin&#x27; in my 5.0</span><br><span class="line">With my rag-top down so my hair can blow</span><br><span class="line">The girlies on standby waving just to say hi</span><br><span class="line">Did you stop? No, I just drove by</span><br></pre></td></tr></table></figure><h3 id="5-ECB-cut-and-paste">(5)ECB cut-and-paste</h3><p>这个题就是读取这个信息然后能够把有用的信息提出来比如email、uid等信息<br>我在这里设置了自动生成的密钥，在给定信息后加密、解密、然后打印识别的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_kv</span>(<span class="params">kv_string</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(pair.split(<span class="string">&#x27;=&#x27;</span>) <span class="keyword">for</span> pair <span class="keyword">in</span> kv_string.split(<span class="string">&#x27;&amp;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile_for</span>(<span class="params">email</span>):</span><br><span class="line">    email = re.sub(<span class="string">r&#x27;[&amp;=]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, email)</span><br><span class="line">    profile = &#123;</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span>: email,</span><br><span class="line">        <span class="string">&#x27;uid&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;email=<span class="subst">&#123;profile[<span class="string">&#x27;email&#x27;</span>]&#125;</span>&amp;uid=<span class="subst">&#123;profile[<span class="string">&#x27;uid&#x27;</span>]&#125;</span>&amp;role=<span class="subst">&#123;profile[<span class="string">&#x27;role&#x27;</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">data</span>):</span><br><span class="line">    block_size = <span class="number">16</span></span><br><span class="line">    padding = block_size - <span class="built_in">len</span>(data) % block_size</span><br><span class="line">    <span class="keyword">return</span> data + <span class="built_in">bytes</span>([padding] * padding)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">data</span>):</span><br><span class="line">    padding = data[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> data[:-padding]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_key</span>():</span><br><span class="line">    <span class="keyword">return</span> get_random_bytes(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_profile</span>(<span class="params">profile, key</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    padded_profile = pad(profile.encode())</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(padded_profile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_profile</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    decrypted = unpad(cipher.decrypt(ciphertext))</span><br><span class="line">    <span class="keyword">return</span> decrypted.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_admin_profile</span>():</span><br><span class="line">    key = generate_key()</span><br><span class="line">    email1 = <span class="string">&quot;foo@bar.com&quot;</span></span><br><span class="line">    email2 = <span class="string">&quot;foo@bar.comadmin&quot;</span> + <span class="string">&quot;\x0b&quot;</span> * <span class="number">11</span>  </span><br><span class="line"></span><br><span class="line">    encrypted1 = encrypt_profile(profile_for(email1), key)</span><br><span class="line">    encrypted2 = encrypt_profile(profile_for(email2), key)</span><br><span class="line">    crafted_ciphertext = encrypted1[:<span class="number">32</span>] + encrypted2[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">    decrypted_profile = decrypt_profile(crafted_ciphertext, key)</span><br><span class="line">    <span class="keyword">return</span> parse_kv(decrypted_profile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(parse_kv(<span class="string">&quot;foo=bar&amp;baz=qux&amp;zap=zazzle&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(profile_for(<span class="string">&quot;foo@bar.com&quot;</span>))</span><br><span class="line">    key = generate_key()</span><br><span class="line">    encrypted = encrypt_profile(profile_for(<span class="string">&quot;foo@bar.com&quot;</span>), key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;---------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(decrypt_profile(encrypted, key))</span><br><span class="line">    <span class="built_in">print</span>(create_admin_profile())</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;foo&#x27;: &#x27;bar&#x27;, &#x27;baz&#x27;: &#x27;qux&#x27;, &#x27;zap&#x27;: &#x27;zazzle&#x27;&#125;</span><br><span class="line">email=foo@bar.com&amp;uid=10&amp;role=user</span><br><span class="line">---------------------------------</span><br><span class="line">email=foo@bar.com&amp;uid=10&amp;role=user</span><br><span class="line">&#123;&#x27;email&#x27;: &#x27;foo@bar.com&#x27;, &#x27;uid&#x27;: &#x27;10&#x27;, &#x27;role&#x27;: &#x27;usmadmi&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Byte-at-a-time-ECB-decryption-Harder">(6)Byte-at-a-time ECB decryption (Harder)</h3><p>随机前缀的长度是不确定的，所以说我们首先需要确定前缀的长度。<br>由于有一个随机前缀，在逐渐增加输入的过程中，某一段的密文会变得稳定，这表示该块已完全由前缀和我们构造的输入组成。然后其他的和前面那个simple是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> Padding</span><br><span class="line"></span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">prefix = os.urandom(randint(<span class="number">1</span>, <span class="number">15</span>))</span><br><span class="line">target = base64.b64decode(</span><br><span class="line">            <span class="string">&quot;Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg&quot;</span></span><br><span class="line">            <span class="string">&quot;aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBq&quot;</span></span><br><span class="line">            <span class="string">&quot;dXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUg&quot;</span></span><br><span class="line">            <span class="string">&quot;YnkK&quot;</span></span><br><span class="line">        )</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message</span>):</span><br><span class="line">    plaintext = Padding.pad(prefix + message + target, <span class="number">16</span>)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(plaintext)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Finding the block size</span></span><br><span class="line">previous_length = <span class="built_in">len</span>(encrypt(<span class="string">b&#x27;&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    length = <span class="built_in">len</span>(encrypt(<span class="string">b&#x27;X&#x27;</span> * i))</span><br><span class="line">    <span class="keyword">if</span> length != previous_length:</span><br><span class="line">        block_size = length - previous_length</span><br><span class="line">        size_prefix_plus_target_aligned = previous_length</span><br><span class="line">        min_known_ptxt_size_to_align = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;did not detect any change in ciphertext length&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> block_size == <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Finding the prefix size</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_bytes_in_blocks</span>(<span class="params">data, block_size</span>):</span><br><span class="line">    <span class="keyword">return</span> [data[i:i + block_size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), block_size)]</span><br><span class="line"></span><br><span class="line">previous_blocks = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, block_size + <span class="number">1</span>):</span><br><span class="line">    blocks = split_bytes_in_blocks(encrypt(<span class="string">b&#x27;X&#x27;</span> * i), block_size)</span><br><span class="line">    <span class="keyword">if</span> previous_blocks <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> blocks[<span class="number">0</span>] == previous_blocks[<span class="number">0</span>]:</span><br><span class="line">        prefix_size = block_size - i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    previous_blocks = blocks</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;did not detect constant ciphertext block&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> prefix_size == <span class="built_in">len</span>(prefix)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute the size of the target</span></span><br><span class="line">target_size = size_prefix_plus_target_aligned - min_known_ptxt_size_to_align - prefix_size</span><br><span class="line"><span class="keyword">assert</span> target_size == <span class="built_in">len</span>(target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decrypt the target bytes</span></span><br><span class="line">known_target_bytes = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(target_size):</span><br><span class="line">    r = prefix_size</span><br><span class="line">    k = <span class="built_in">len</span>(known_target_bytes)</span><br><span class="line">    padding_length = (-k - <span class="number">1</span> - r) % block_size</span><br><span class="line">    padding = <span class="string">b&quot;X&quot;</span> * padding_length</span><br><span class="line"></span><br><span class="line">    target_block_number = (k + r) // block_size</span><br><span class="line">    target_slice = <span class="built_in">slice</span>(target_block_number * block_size, (target_block_number + <span class="number">1</span>) * block_size)</span><br><span class="line">    target_block = encrypt(padding)[target_slice]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        message = padding + known_target_bytes + <span class="built_in">bytes</span>([i])</span><br><span class="line">        block = encrypt(message)[target_slice]</span><br><span class="line">        <span class="keyword">if</span> block == target_block:</span><br><span class="line">            known_target_bytes += <span class="built_in">bytes</span>([i])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(known_target_bytes.decode())</span><br></pre></td></tr></table></figure><p>答案是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rollin&#x27; in my 5.0</span><br><span class="line">With my rag-top down so my hair can blow</span><br><span class="line">The girlies on standby waving just to say hi</span><br><span class="line">Did you stop? No, I just drove by</span><br></pre></td></tr></table></figure><h3 id="7-PKCS-7-padding-validation">(7)PKCS#7 padding validation</h3><p>这个就写几个PKCS#7的测试就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">validate_and_strip_pkcs7_padding</span>(<span class="params">plaintext</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> plaintext:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;The plaintext is empty&quot;</span>)</span><br><span class="line"></span><br><span class="line">    padding_value = plaintext[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> padding_value &lt; <span class="number">1</span> <span class="keyword">or</span> padding_value &gt; <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid padding value&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> plaintext[-padding_value:] != <span class="built_in">bytes</span>([padding_value]) * padding_value:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid PKCS#7 padding&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> plaintext[:-padding_value]</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = validate_and_strip_pkcs7_padding(<span class="string">b&quot;ICE ICE BABY\x04\x04\x04\x04&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result.decode())  <span class="comment"># output: ICE ICE BABY</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = validate_and_strip_pkcs7_padding(<span class="string">b&quot;ICE ICE BABY\x05\x05\x05\x05&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result.decode())</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)  <span class="comment"># output: Invalid PKCS#7 padding</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = validate_and_strip_pkcs7_padding(<span class="string">b&quot;ICE ICE BABY\x01\x02\x03\x04&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result.decode())</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)  <span class="comment"># output: Invalid PKCS#7 padding</span></span><br></pre></td></tr></table></figure><h3 id="8-CBC-bit-flipping-attacks">(8)CBC bit flipping attacks</h3><p>我们要让<code>;admin=true;</code>出现在消息中但是不可以用&quot;;“或”=&quot;，所以说设置<code>sanitize_input</code>函数将输入中的 ‘;’ 和 ‘=’ 字符转义成对应的16进制表示，防止用户直接输入<code>;admin=true;</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sanitize_input</span>(<span class="params">userdata</span>):</span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">r&#x27;[;=]&#x27;</span>, <span class="keyword">lambda</span> x: <span class="string">f&quot;%<span class="subst">&#123;<span class="built_in">ord</span>(x.group(<span class="number">0</span>)):02x&#125;</span>&quot;</span>, userdata)<span class="comment">#将字符转换为16进制</span></span><br></pre></td></tr></table></figure><p>然后接受用户的输入数据，首先将其转义，然后将它嵌入到一个固定的前缀和后缀之间，组成完整的明文。最后，该明文经过<code>AES CBC</code>模式加密后返回密文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">userdata</span>):</span><br><span class="line">    prefix = <span class="string">b&quot;comment1=cooking%20MCs;userdata=&quot;</span></span><br><span class="line">    suffix = <span class="string">b&quot;;comment2=%20like%20a%20pound%20of%20bacon&quot;</span></span><br><span class="line">    sanitized_userdata = sanitize_input(userdata.decode()).encode()</span><br><span class="line">    plaintext = prefix + sanitized_userdata + suffix</span><br><span class="line">    padded_plaintext = pad(plaintext)</span><br><span class="line">    cipher = AES.new(KEY, AES.MODE_CBC, IV)</span><br><span class="line">    ciphertext = cipher.encrypt(padded_plaintext)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Plaintext: <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br></pre></td></tr></table></figure><p>生成一个初始的密文16个字母A。定位我们希望进行位翻转的区域，通过亦或运算操作修改密文的第二个块这将影响解密出的第三个块的明文。而我们希望将明文中的16个字母A变成 <code>;admin=true;</code>所以编写翻转攻击函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bitflipping_attack</span>():</span><br><span class="line">    <span class="comment"># 生成初始的密文</span></span><br><span class="line">    userdata = <span class="string">b&quot;A&quot;</span> * <span class="number">16</span></span><br><span class="line">    ciphertext = encrypt(userdata)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Ciphertext: <span class="subst">&#123;ciphertext&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改密文以注入 &quot;;admin=true;&quot;</span></span><br><span class="line">    block_size = <span class="number">16</span></span><br><span class="line">    modified_ciphertext = <span class="built_in">bytearray</span>(ciphertext)</span><br><span class="line">    target = <span class="string">b&quot;;admin=true;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(target)):</span><br><span class="line">        modified_ciphertext[block_size + i] ^= <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) ^ target[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查修改后的密文是否包含 &quot;;admin=true;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> decrypt(<span class="built_in">bytes</span>(modified_ciphertext))</span><br></pre></td></tr></table></figure><p>最后运行出来的答案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Plaintext: b&#x27;comment1=cooking%20MCs;userdata=AAAAAAAAAAAAAAAA;comment2=%20like%20a%20pound%20of%20bacon&#x27;</span><br><span class="line">Ciphertext: b&quot;\x1e^H\xec\xfen\xa8\x90\xf0\xae&amp;j\x9a&lt;\x1a\x03\xc7!4\x7f[\xce\xf5\xcc~GC)\xaeA\x15\xd2\xd0\xefz\xdf##\x11\xaf\xdaOP\x1albKi\xc4\x80#\x00\xa1\x18s\xf2\xec%\x11\x0f\xba&#x27;\xf6\xca\x16e\xd6\xddxJU\xf1\x1c\xda\x8b\xado\xe5\n\xfa\x83&#x27;1\x01\xe8;\x0e\n\x84/\xbf\x14\xf9\x93\x1f\xac&quot;</span><br><span class="line">Decrypted: b&#x27;comment1=cooking\x19yD\xf4*p\xd9B\xd1\xde\x08#\x8cb\x9b\xaf;admin=true;AAAA;comment2=%20like%20a%20pound%20of%20bacon&#x27;</span><br><span class="line">Bitflipping attack successful: True</span><br></pre></td></tr></table></figure><h2 id="实验总结">实验总结</h2><p>在这次密码实验中，我实现了多个重要的加密功能和攻击，包括 <strong>PKCS#7 填充</strong>、<strong>ECB/CBC 检测</strong>、<strong>逐字节 ECB 解密（简单与复杂版）</strong>、以及 <strong>CBC 位翻转攻击</strong>等多个实验。通过这些实验，我对加密算法AES运用更加熟练，也了解到CBC模式下的位翻转攻击以及ECB模式的可预测性也就是漏洞。我知道了，加密不仅要保证数据的机密性，还必须结合完整性验证等手段，才能有效防御攻击者的篡改和攻击。</p><h2 id="源代码链接">源代码链接</h2><p><a href="https://github.com/cool-chicken/cryptography-exp/tree/main/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C%E4%BA%8C">https://github.com/cool-chicken/cryptography-exp/tree/main/密码学实验二</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 密码学实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/Blog/2024/10/12/hello-world/"/>
      <url>/Blog/2024/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my crypto-1</title>
      <link href="/Blog/2024/10/12/my-crypto-1/"/>
      <url>/Blog/2024/10/12/my-crypto-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Many-Time-Pad">1. Many Time Pad</h2><p>Coursera Dan Boneh Week 1 Program Assignment（<a href="https://www.coursera.org/learn/crypto/quiz/KZ9js/week-1-programming-assignment-optional">link</a>）</p><h3 id="题目分析">题目分析</h3><p>题目中11个密文均应用了相同的密钥我们知道：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>=</mo><mi>k</mi><mo>⊕</mo><msub><mi>m</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo>=</mo><mi>k</mi><mo>⊕</mo><msub><mi>m</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>c</mi><mn>2</mn></msub><mo>=</mo><msub><mi>m</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>m</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">c_{1}=k \oplus m_{1},c_{2}=k \oplus m_{2},c_{1}\oplus c_{2}=m_{1}\oplus m_{2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>根据提示中的考虑空格与 [a-zA-Z] 字符进行亦或运算会改变大小写（a变成A，B变成b）我们可以设置一个判断函数<code>magic()</code>：如果运算结果是0则是相同字符亦或运算，若是合法字符则是一个合法字符和空格运算，其余结果用输出’_'来标记。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">magic</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">if</span> c == <span class="number">0</span>:  <span class="comment"># same (&#x27;A&#x27; xor &#x27;A&#x27; = &#x27;\x00&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(c) <span class="keyword">in</span> string.ascii_letters:  <span class="comment"># space xor letter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;_&#x27;</span></span><br></pre></td></tr></table></figure><p>然后我们来运行以上步骤，通过把11个密文分别两两亦或得到带有提示符的明文亦或结果，然后通过提示字段猜测最长的那个明文具体值（也就是第7个明文（编号为6））</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c1, c2 <span class="keyword">in</span> combinations(MSGS, <span class="number">2</span>):</span><br><span class="line">   xm = strxor(<span class="built_in">bytes</span>.fromhex(c1), <span class="built_in">bytes</span>.fromhex(c2))</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;&#123;:2&#125; &#123;:2&#125;&#x27;</span>.<span class="built_in">format</span>(MSGS.index(c1), MSGS.index(c2)), <span class="string">&#x27;&#x27;</span>.join(magic(i) <span class="keyword">for</span> i <span class="keyword">in</span> xm))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就是繁琐的猜测明文过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># KEY = strxor(bytes.fromhex(MSGS[10]), b&#x27;The &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[5]), b&#x27;There are &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[3]), b&#x27;The ciphertext &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[10]), b&#x27;The secret message is &#x27;)  # The end is not correct</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[5]), b&#x27;There are two types of &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[7]), b&#x27;We can see the point where &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[7]), b&#x27; The Concise OxfordDictionaries &#x27;)  # Interesting; Step back</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[5]), b&#x27;There are two types of crypto&#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[6]), b&#x27;There are two types of cyptography&#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[0]), b&#x27;We can factor the number 15 with quantum&#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[3]), b&#x27;The ciphertext produced by a weak encryption &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[10]), b&#x27;The secret message is: When using a stream cipher&#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[3]), b&#x27;The ciphertext produced by a weak encryption algorithm &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[10]), b&#x27;The secret message is: When using a stream cipher, never use &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[6]), b&#x27;There are two types of cyptography: one that allows the Government &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[0]), b&#x27;We can factor the number 15 with quantum computers. We can also factor &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[10]), b&#x27;The secret message is: When using a stream cipher, never use the key more than &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[3]), b&#x27;The ciphertext produced by a weak encryption algorithm looks as good as ciphertext &#x27;)</span><br></pre></td></tr></table></figure><p>最后得到最长的明文是<code>There are two types of cyptography: one that allows the Government to use brute force to break the code, and one that requires the Government to use brute force to break you</code>通过亦或得到密钥最后解出<strong>最终答案</strong>。</p><p><font color = Red><strong>The secret message is: When using a stream cipher, never use the key more than once</strong></font></p><h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">MSGS = (</span><br><span class="line">    <span class="string">&#x27;315c4eeaa8b5f8aaf9174145bf43e1784b8fa00dc71d885a804e5ee9fa40b16349c146fb778cdf2d3aff021dfff5b403b510d0d0455468aeb98622b137dae857553ccd8883a7bc37520e06e515d22c954eba5025b8cc57ee59418ce7dc6bc41556bdb36bbca3e8774301fbcaa3b83b220809560987815f65286764703de0f3d524400a19b159610b11ef3e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;234c02ecbbfbafa3ed18510abd11fa724fcda2018a1a8342cf064bbde548b12b07df44ba7191d9606ef4081ffde5ad46a5069d9f7f543bedb9c861bf29c7e205132eda9382b0bc2c5c4b45f919cf3a9f1cb74151f6d551f4480c82b2cb24cc5b028aa76eb7b4ab24171ab3cdadb8356f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;32510ba9a7b2bba9b8005d43a304b5714cc0bb0c8a34884dd91304b8ad40b62b07df44ba6e9d8a2368e51d04e0e7b207b70b9b8261112bacb6c866a232dfe257527dc29398f5f3251a0d47e503c66e935de81230b59b7afb5f41afa8d661cb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;32510ba9aab2a8a4fd06414fb517b5605cc0aa0dc91a8908c2064ba8ad5ea06a029056f47a8ad3306ef5021eafe1ac01a81197847a5c68a1b78769a37bc8f4575432c198ccb4ef63590256e305cd3a9544ee4160ead45aef520489e7da7d835402bca670bda8eb775200b8dabbba246b130f040d8ec6447e2c767f3d30ed81ea2e4c1404e1315a1010e7229be6636aaa&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3f561ba9adb4b6ebec54424ba317b564418fac0dd35f8c08d31a1fe9e24fe56808c213f17c81d9607cee021dafe1e001b21ade877a5e68bea88d61b93ac5ee0d562e8e9582f5ef375f0a4ae20ed86e935de81230b59b73fb4302cd95d770c65b40aaa065f2a5e33a5a0bb5dcaba43722130f042f8ec85b7c2070&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;32510bfbacfbb9befd54415da243e1695ecabd58c519cd4bd2061bbde24eb76a19d84aba34d8de287be84d07e7e9a30ee714979c7e1123a8bd9822a33ecaf512472e8e8f8db3f9635c1949e640c621854eba0d79eccf52ff111284b4cc61d11902aebc66f2b2e436434eacc0aba938220b084800c2ca4e693522643573b2c4ce35050b0cf774201f0fe52ac9f26d71b6cf61a711cc229f77ace7aa88a2f19983122b11be87a59c355d25f8e4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;32510bfbacfbb9befd54415da243e1695ecabd58c519cd4bd90f1fa6ea5ba47b01c909ba7696cf606ef40c04afe1ac0aa8148dd066592ded9f8774b529c7ea125d298e8883f5e9305f4b44f915cb2bd05af51373fd9b4af511039fa2d96f83414aaaf261bda2e97b170fb5cce2a53e675c154c0d9681596934777e2275b381ce2e40582afe67650b13e72287ff2270abcf73bb028932836fbdecfecee0a3b894473c1bbeb6b4913a536ce4f9b13f1efff71ea313c8661dd9a4ce&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;315c4eeaa8b5f8bffd11155ea506b56041c6a00c8a08854dd21a4bbde54ce56801d943ba708b8a3574f40c00fff9e00fa1439fd0654327a3bfc860b92f89ee04132ecb9298f5fd2d5e4b45e40ecc3b9d59e9417df7c95bba410e9aa2ca24c5474da2f276baa3ac325918b2daada43d6712150441c2e04f6565517f317da9d3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;271946f9bbb2aeadec111841a81abc300ecaa01bd8069d5cc91005e9fe4aad6e04d513e96d99de2569bc5e50eeeca709b50a8a987f4264edb6896fb537d0a716132ddc938fb0f836480e06ed0fcd6e9759f40462f9cf57f4564186a2c1778f1543efa270bda5e933421cbe88a4a52222190f471e9bd15f652b653b7071aec59a2705081ffe72651d08f822c9ed6d76e48b63ab15d0208573a7eef027&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;466d06ece998b7a2fb1d464fed2ced7641ddaa3cc31c9941cf110abbf409ed39598005b3399ccfafb61d0315fca0a314be138a9f32503bedac8067f03adbf3575c3b8edc9ba7f537530541ab0f9f3cd04ff50d66f1d559ba520e89a2cb2a83&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;32510ba9babebbbefd001547a810e67149caee11d945cd7fc81a05e9f85aac650e9052ba6a8cd8257bf14d13e6f0a803b54fde9e77472dbff89d71b57bddef121336cb85ccb8f3315f4b52e301d16e9f52f904&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strxor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a[:<span class="built_in">len</span>(b)], b)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a, b[:<span class="built_in">len</span>(a)])])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magic</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">if</span> c == <span class="number">0</span>:  <span class="comment"># same (&#x27;A&#x27; xor &#x27;A&#x27; = &#x27;\x00&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(c) <span class="keyword">in</span> string.ascii_letters:  <span class="comment"># space xor letter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;_&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c1, c2 <span class="keyword">in</span> combinations(MSGS, <span class="number">2</span>):</span><br><span class="line">        xm = strxor(<span class="built_in">bytes</span>.fromhex(c1), <span class="built_in">bytes</span>.fromhex(c2))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;:2&#125; &#123;:2&#125;&#x27;</span>.<span class="built_in">format</span>(MSGS.index(c1), MSGS.index(c2)), <span class="string">&#x27;&#x27;</span>.join(magic(i) <span class="keyword">for</span> i <span class="keyword">in</span> xm))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n开始猜明文～（很显然先猜大部分都是_的字母，然后疯狂填字）\n&#x27;</span>)</span><br><span class="line">    KEY = strxor(<span class="built_in">bytes</span>.fromhex(MSGS[<span class="number">6</span>]), <span class="string">b&#x27;There are two types of cyptography: one that allows the Government to use brute force to break the code, and one that requires the Government to use brute force to break you&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x, m <span class="keyword">in</span> <span class="built_in">enumerate</span>(MSGS):</span><br><span class="line">        <span class="built_in">print</span>(x, strxor(<span class="built_in">bytes</span>.fromhex(m), KEY).decode(encoding= <span class="string">&#x27;utf-8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(KEY.<span class="built_in">hex</span>())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="2-PA1-option">2. PA1 option</h2><p>Write a program that allows you to “crack” ciphertexts generated using a Vigenere-like cipher, where byte-wise XOR is used instead of addition modulo 26.</p><h3 id="题目分析-2">题目分析</h3><p>简单来说就是解密vigenere的密码，但是其中运算过程是使用逐字节异或而不是加法模26。<br>所以我们首先需要得到密钥<code>key</code>，所以我们要定义一个寻找可能密钥字符的函数<code>find_index_key(sub_arr)</code>。这里定义all_key为所有可能的字符，包括字母、数字、逗号、点和空格。初始化两个列表test_key和possible_key。遍历test_key中的每个值（ASCII字符），并对sub_arr中的每个字节进行亦或，如果结果不在all_key中，则将该ASCII值从possible_key中移除。最后返回possible_key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_index_key</span>(<span class="params">sub_arr</span>): </span><br><span class="line">    all_key = ascii_letters + digits + <span class="string">&#x27;,&#x27;</span> + <span class="string">&#x27;.&#x27;</span> + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    test_key = []</span><br><span class="line">    possible_key = []</span><br><span class="line">    <span class="comment"># 遍历整个ascii码(0-127)</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x00</span>, <span class="number">0xFF</span>):</span><br><span class="line">        test_key.append(x)</span><br><span class="line">        possible_key.append(x)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> test_key:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> sub_arr:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">chr</span>(i ^ j) <span class="keyword">not</span> <span class="keyword">in</span> all_key:</span><br><span class="line">                possible_key.remove(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> possible_key</span><br></pre></td></tr></table></figure><p>然后遍历<code>key</code>的长度，然后和密文进行亦或运算查看可能的密钥可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key_len <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        sub_arr = ct[index::key_len]  </span><br><span class="line">        possible_ch = find_index_key(sub_arr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;key_len = &#x27;</span>, key_len, <span class="string">&#x27;index = &#x27;</span>, index, <span class="string">&#x27;possible_ch = &#x27;</span>, possible_ch)</span><br><span class="line">        <span class="keyword">if</span> possible_ch:</span><br><span class="line">            k = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> possible_ch:</span><br><span class="line">                k.append(<span class="built_in">chr</span>(j ^ sub_arr[<span class="number">0</span>]))</span><br><span class="line">            <span class="built_in">print</span>(k)</span><br></pre></td></tr></table></figure><p>输出的部分结果如下（这里的index便于定位密钥的位置）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">key_len =  7 index =  0 possible_ch =  [186]</span><br><span class="line">[&#x27;C&#x27;]</span><br><span class="line">key_len =  7 index =  1 possible_ch =  [31]</span><br><span class="line">[&#x27;r&#x27;]</span><br><span class="line">key_len =  7 index =  2 possible_ch =  [145]</span><br><span class="line">[&#x27;y&#x27;]</span><br><span class="line">key_len =  7 index =  3 possible_ch =  [178]</span><br><span class="line">[&#x27;p&#x27;]</span><br><span class="line">key_len =  7 index =  4 possible_ch =  [83]</span><br><span class="line">[&#x27;t&#x27;]</span><br><span class="line">key_len =  7 index =  5 possible_ch =  [205]</span><br><span class="line">[&#x27;o&#x27;]</span><br><span class="line">key_len =  7 index =  6 possible_ch =  [62]</span><br><span class="line">[&#x27;g&#x27;]</span><br></pre></td></tr></table></figure><p>得到关键的密钥<code>key = [186, 31, 145, 178, 83, 205, 62]</code><br>最后带入就能解出明文，<strong>最终答案</strong></p><p><font color = Red><strong>Cryptography is the practice and study of techniques for, among other things, secure communication in the presence of attackers. Cryptography has been used for hundreds, if not thousands, of years, but traditional cryptosystems were designed and evaluated in a fairly ad hoc manner. For example, the Vigenere encryption scheme was thought to be secure for decades after it was invented, but we now know, and this exercise demonstrates, that it can be broken very easily.</strong></font></p><h3 id="完整代码-2">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters, digits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_index_key</span>(<span class="params">sub_arr</span>): </span><br><span class="line">    all_key = ascii_letters + digits + <span class="string">&#x27;,&#x27;</span> + <span class="string">&#x27;.&#x27;</span> + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    test_key = []</span><br><span class="line">    possible_key = []</span><br><span class="line">    <span class="comment"># 遍历整个ascii码(0-127)</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x00</span>, <span class="number">0xFF</span>):</span><br><span class="line">        test_key.append(x)</span><br><span class="line">        possible_key.append(x)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> test_key:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> sub_arr:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">chr</span>(i ^ j) <span class="keyword">not</span> <span class="keyword">in</span> all_key:</span><br><span class="line">                possible_key.remove(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> possible_key</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;F96DE8C227A259C87EE1DA2AED57C93FE5DA36ED4EC87EF2C63AAE5B9A7EFFD673BE4ACF7BE8923CAB1ECE7AF2DA3DA44FCF7AE29235A24C963FF0DF3CA3599A70E5DA36BF1ECE77F8DC34BE129A6CF4D126BF5B9A7CFEDF3EB850D37CF0C63AA2509A76FF9227A55B9A6FE3D720A850D97AB1DD35ED5FCE6BF0D138A84CC931B1F121B44ECE70F6C032BD56C33FF9D320ED5CDF7AFF9226BE5BDE3FF7DD21ED56CF71F5C036A94D963FF8D473A351CE3FE5DA3CB84DDB71F5C17FED51DC3FE8D732BF4D963FF3C727ED4AC87EF5DB27A451D47EFD9230BF47CA6BFEC12ABE4ADF72E29224A84CDF3FF5D720A459D47AF59232A35A9A7AE7D33FB85FCE7AF5923AA31EDB3FF7D33ABF52C33FF0D673A551D93FFCD33DA35BC831B1F43CBF1EDF67F0DF23A15B963FE5DA36ED68D378F4DC36BF5B9A7AFFD121B44ECE76FEDC73BE5DD27AFCD773BA5FC93FE5DA3CB859D26BB1C63CED5CDF3FE2D730B84CDF3FF7DD21ED5ADF7CF0D636BE1EDB79E5D721ED57CE3FE6D320ED57D469F4DC27A85A963FF3C727ED49DF3FFFDD24ED55D470E69E73AC50DE3FE5DA3ABE1EDF67F4C030A44DDF3FF5D73EA250C96BE3D327A84D963FE5DA32B91ED36BB1D132A31ED87AB1D021A255DF71B1C436BF479A7AF0C13AA14794&quot;</span></span><br><span class="line">ct = <span class="built_in">bytes</span>.fromhex(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key_len <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        sub_arr = ct[index::key_len]  </span><br><span class="line">        possible_ch = find_index_key(sub_arr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;key_len = &#x27;</span>, key_len, <span class="string">&#x27;index = &#x27;</span>, index, <span class="string">&#x27;possible_ch = &#x27;</span>, possible_ch)</span><br><span class="line">        <span class="keyword">if</span> possible_ch:</span><br><span class="line">            k = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> possible_ch:</span><br><span class="line">                k.append(<span class="built_in">chr</span>(j ^ sub_arr[<span class="number">0</span>]))</span><br><span class="line">            <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line">key = [<span class="number">186</span>, <span class="number">31</span>, <span class="number">145</span>, <span class="number">178</span>, <span class="number">83</span>, <span class="number">205</span>, <span class="number">62</span>]</span><br><span class="line">pt = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ct)):</span><br><span class="line">    pt += <span class="built_in">chr</span>(ct[i] ^ key[i % <span class="number">7</span>])</span><br><span class="line"><span class="built_in">print</span>(pt)</span><br></pre></td></tr></table></figure><h2 id="3-Crypto-Challenge-Set-1-link">3.Crypto Challenge Set 1(<a href="http://www.cryptopals.com/sets/1">link</a>)</h2><h3 id="1-Convert-hex-to-base64">(1)Convert hex to base64</h3><p>如题就是把十六进制转化为base64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_base64</span>(<span class="params">hex_data</span>):</span><br><span class="line">    base64_string = base64.b64encode(<span class="built_in">bytes</span>.fromhex(hex_data)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> base64_string</span><br></pre></td></tr></table></figure><h3 id="2-Fixed-XOR">(2)Fixed XOR</h3><p>等长亦或运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fixed_xor</span>(<span class="params">hex_str1, hex_str2</span>):</span><br><span class="line">    byte_str1 = <span class="built_in">bytes</span>.fromhex(hex_str1)</span><br><span class="line">    byte_str2 = <span class="built_in">bytes</span>.fromhex(hex_str2)</span><br><span class="line">    xor_result = <span class="built_in">bytes</span>([b1 ^ b2 <span class="keyword">for</span> b1, b2 <span class="keyword">in</span> <span class="built_in">zip</span>(byte_str1, byte_str2)])</span><br><span class="line">    hex_result = xor_result.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> hex_result</span><br></pre></td></tr></table></figure><h3 id="3-Single-byte-XOR-cipher">(3)Single-byte XOR cipher</h3><p>因为是单个字节的亦或密码，并且选取字母分数最高的密钥，所以遍历所有的<code>key</code>。选取明文中英文字符占比分数最大的明文和密钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_single_byte_xor</span>(<span class="params">cipher_hex</span>):</span><br><span class="line">    cipher_bytes = codecs.decode(cipher_hex, <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_english</span>(<span class="params">text</span>):</span><br><span class="line">        <span class="keyword">return</span> text.isascii() <span class="keyword">and</span> text.isprintable()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">english_score</span>(<span class="params">text</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> char <span class="keyword">in</span> text <span class="keyword">if</span> char.isalpha())</span><br><span class="line">    best_key = <span class="literal">None</span></span><br><span class="line">    best_score = -<span class="number">1</span></span><br><span class="line">    best_plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        decrypted = <span class="built_in">bytes</span>([cipher_bytes[i] ^ key <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_bytes))])</span><br><span class="line">        decrypted_text = decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> is_english(decrypted_text):</span><br><span class="line">            score = english_score(decrypted_text)</span><br><span class="line">            <span class="keyword">if</span> score &gt; best_score:</span><br><span class="line">                best_score = score</span><br><span class="line">                best_key = key</span><br><span class="line">                best_plaintext = decrypted_text</span><br><span class="line">    <span class="keyword">return</span> best_plaintext, best_key</span><br><span class="line"></span><br><span class="line">cipher_hex = <span class="string">&quot;1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736&quot;</span></span><br><span class="line">decrypted_text, key = decrypt_single_byte_xor(cipher_hex)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Text:&quot;</span>, decrypted_text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Key:&quot;</span>, <span class="built_in">hex</span>(key))</span><br></pre></td></tr></table></figure><p>运行代码解出答案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Decrypted Text: Cooking MC&#x27;s like a pound of bacon</span><br><span class="line">Key: 0x58</span><br></pre></td></tr></table></figure><h3 id="4-Detect-single-character-XOR">(4)Detect single-character XOR</h3><p>这个引入上一问的函数并且加入字符频次表。通过逐行读取密文并且应用单字符密钥得到每行最高分数的key。最后选取出最高分数的明文作为答案输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_english_score</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    character_frequencies = &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="number">.08167</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">.01492</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">.02782</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">.04253</span>,</span><br><span class="line">        <span class="string">&#x27;e&#x27;</span>: <span class="number">.12702</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">.02228</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">.02015</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">.06094</span>,</span><br><span class="line">        <span class="string">&#x27;i&#x27;</span>: <span class="number">.06094</span>, <span class="string">&#x27;j&#x27;</span>: <span class="number">.00153</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">.00772</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">.04025</span>,</span><br><span class="line">        <span class="string">&#x27;m&#x27;</span>: <span class="number">.02406</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">.06749</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">.07507</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">.01929</span>,</span><br><span class="line">        <span class="string">&#x27;q&#x27;</span>: <span class="number">.00095</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">.05987</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">.06327</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">.09056</span>,</span><br><span class="line">        <span class="string">&#x27;u&#x27;</span>: <span class="number">.02758</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">.00978</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">.02360</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">.00150</span>,</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>: <span class="number">.01974</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">.00074</span>, <span class="string">&#x27; &#x27;</span>: <span class="number">.13000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([character_frequencies.get(<span class="built_in">chr</span>(byte), <span class="number">0</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> input_bytes.lower()])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_char_xor</span>(<span class="params">input_bytes, char_value</span>):</span><br><span class="line">    output_bytes = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> input_bytes:</span><br><span class="line">        output_bytes += <span class="built_in">bytes</span>([byte ^ char_value])</span><br><span class="line">    <span class="keyword">return</span> output_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruteforce_single_char_xor</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    potential_messages = []</span><br><span class="line">    <span class="keyword">for</span> key_value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        message = single_char_xor(ciphertext, key_value)</span><br><span class="line">        score = get_english_score(message)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: message,</span><br><span class="line">            <span class="string">&#x27;score&#x27;</span>: score,</span><br><span class="line">            <span class="string">&#x27;key&#x27;</span>: key_value</span><br><span class="line">        &#125;</span><br><span class="line">        potential_messages.append(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(potential_messages, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;score&#x27;</span>], reverse=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_xor_cipher</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()</span><br><span class="line">        best_plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">        best_key = <span class="literal">None</span></span><br><span class="line">        best_score = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            cipher_hex = line.strip()</span><br><span class="line">            ciphertext = <span class="built_in">bytes</span>.fromhex(cipher_hex)</span><br><span class="line">            result = bruteforce_single_char_xor(ciphertext)</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;score&#x27;</span>] &gt; best_score:</span><br><span class="line">                best_score = result[<span class="string">&#x27;score&#x27;</span>]</span><br><span class="line">                best_plaintext = result[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">                best_key = result[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> best_plaintext, <span class="built_in">hex</span>(best_key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    file_path = <span class="string">&quot;plain.txt&quot;</span></span><br><span class="line">    detected_plaintext, key = detect_xor_cipher(file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;plaintext: &quot;</span>,detected_plaintext.decode())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key: <span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>最终答案</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plaintext:  Now that the party is jumping</span><br><span class="line"></span><br><span class="line">Key: 0x35</span><br></pre></td></tr></table></figure><h3 id="5-Implement-repeating-key-XOR">(5)Implement repeating-key XOR</h3><p>这个就是重复密钥进行亦或操作，代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">    repeated_key = (key * (<span class="built_in">len</span>(plaintext) // <span class="built_in">len</span>(key))) + key[:<span class="built_in">len</span>(plaintext) % <span class="built_in">len</span>(key)]</span><br><span class="line">    encrypted_decrypted = <span class="built_in">bytes</span>([p ^ k <span class="keyword">for</span> p, k <span class="keyword">in</span> <span class="built_in">zip</span>(plaintext.encode(), repeated_key.encode())])</span><br><span class="line">    <span class="keyword">return</span> encrypted_decrypted.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">&#x27;&#x27;&#x27;Burning &#x27;em, if you ain&#x27;t quick and nimble I go crazy when I hear a cymbal&#x27;&#x27;&#x27;</span></span><br><span class="line">key = <span class="string">&quot;ICE&quot;</span></span><br><span class="line">encrypted1 = xor(plaintext, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encrypted:&quot;</span>, encrypted1)</span><br></pre></td></tr></table></figure><h3 id="6-Break-repeating-key-XOR">(6)Break repeating-key XOR</h3><p>首先要猜测密钥的长度这里范围由题目所述（2到40），设置了计算汉明距离的函数<code>hamming_distance(a, b)</code>其后继承上述题目的代码得到最高字符频次分数的密码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">English_Scoring</span>(<span class="params">t</span>):</span><br><span class="line">    letter_frequency = &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="number">.08167</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">.01492</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">.02782</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">.04253</span>,</span><br><span class="line">        <span class="string">&#x27;e&#x27;</span>: <span class="number">.12702</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">.02228</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">.02015</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">.06094</span>,</span><br><span class="line">        <span class="string">&#x27;i&#x27;</span>: <span class="number">.06094</span>, <span class="string">&#x27;j&#x27;</span>: <span class="number">.00153</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">.00772</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">.04025</span>,</span><br><span class="line">        <span class="string">&#x27;m&#x27;</span>: <span class="number">.02406</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">.06749</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">.07507</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">.01929</span>,</span><br><span class="line">        <span class="string">&#x27;q&#x27;</span>: <span class="number">.00095</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">.05987</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">.06327</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">.09056</span>,</span><br><span class="line">        <span class="string">&#x27;u&#x27;</span>: <span class="number">.02758</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">.00978</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">.02360</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">.00150</span>,</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>: <span class="number">.01974</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">.00074</span>, <span class="string">&#x27; &#x27;</span>: <span class="number">.15000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([letter_frequency.get(<span class="built_in">chr</span>(i), <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> t.lower()])  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Single_XOR</span>(<span class="params">s, single_character</span>):</span><br><span class="line">    t = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        t += <span class="built_in">bytes</span>([i ^ single_character])</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ciphertext_XOR</span>(<span class="params">s</span>):</span><br><span class="line">    _data = []</span><br><span class="line">    <span class="keyword">for</span> single_character <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        ciphertext = Single_XOR(s, single_character)</span><br><span class="line">        score = English_Scoring(ciphertext)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;Single character&#x27;</span>: single_character,</span><br><span class="line">            <span class="string">&#x27;ciphertext&#x27;</span>: ciphertext,</span><br><span class="line">            <span class="string">&#x27;score&#x27;</span>: score</span><br><span class="line">        &#125;</span><br><span class="line">        _data.append(data)</span><br><span class="line">    score = <span class="built_in">sorted</span>(_data, key=<span class="keyword">lambda</span> score: score[<span class="string">&#x27;score&#x27;</span>], reverse=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Repeating_key_XOR</span>(<span class="params">_cipher, _key</span>):</span><br><span class="line">    message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    length = <span class="built_in">len</span>(_key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(_cipher)):</span><br><span class="line">        message += <span class="built_in">bytes</span>([_cipher[i] ^ _key[i % length]])</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hamming_distance</span>(<span class="params">a, b</span>):</span><br><span class="line">    distance = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(a, b):</span><br><span class="line">        byte = i ^ j</span><br><span class="line">        distance += <span class="built_in">sum</span>(k == <span class="string">&#x27;1&#x27;</span> <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">bin</span>(byte))</span><br><span class="line">    <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_the_keysize</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> keysize <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">41</span>):</span><br><span class="line">        block = [ciphertext[i:i + keysize] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), keysize)]</span><br><span class="line">        distances = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(block) - <span class="number">1</span>):</span><br><span class="line">            block1 = block[i]</span><br><span class="line">            block2 = block[i + <span class="number">1</span>]</span><br><span class="line">            distance = hamming_distance(block1, block2)</span><br><span class="line">            distances.append(distance / keysize)</span><br><span class="line">        _distance = <span class="built_in">sum</span>(distances) / <span class="built_in">len</span>(distances)</span><br><span class="line">        _data = &#123;</span><br><span class="line">            <span class="string">&#x27;keysize&#x27;</span>: keysize,</span><br><span class="line">            <span class="string">&#x27;distance&#x27;</span>: _distance</span><br><span class="line">        &#125;</span><br><span class="line">        data.append(_data)</span><br><span class="line">    _keysize = <span class="built_in">sorted</span>(data, key=<span class="keyword">lambda</span> distance: distance[<span class="string">&#x27;distance&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> _keysize</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Break_repeating_key_XOR</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    _keysize = Get_the_keysize(ciphertext)</span><br><span class="line">    keysize = _keysize[<span class="string">&#x27;keysize&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;keysize:&quot;</span>, keysize)</span><br><span class="line">    key = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    block = [ciphertext[i:i + keysize] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), keysize)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(keysize):</span><br><span class="line">        new_block = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(block) - <span class="number">1</span>):</span><br><span class="line">            s = block[j]</span><br><span class="line">            new_block += <span class="built_in">bytes</span>([s[i]])</span><br><span class="line">        score = ciphertext_XOR(new_block)</span><br><span class="line">        key += <span class="built_in">bytes</span>([score[<span class="string">&#x27;Single character&#x27;</span>]])</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(block)):</span><br><span class="line">        message += Repeating_key_XOR(block[k], key)</span><br><span class="line">    <span class="keyword">return</span> message, key</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;decription.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> of:</span><br><span class="line">        ciphertext = of.read()</span><br><span class="line">        ciphertext = base64.b64decode(ciphertext)</span><br><span class="line">    message, key = Break_repeating_key_XOR(ciphertext)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, message.decode(<span class="string">&#x27;utf-8&#x27;</span>), <span class="string">&quot;\nkey:&quot;</span>, key.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>最后运算出密钥长度为<code>29</code>，<code>key: Terminator X: Bring the noise</code>解密后的明文为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">I&#x27;m back and I&#x27;m ringin&#x27; the bell </span><br><span class="line">A rockin&#x27; on the mike while the fly girls yell </span><br><span class="line">In ecstasy in the back of me </span><br><span class="line">Well that&#x27;s my DJ Deshay cuttin&#x27; all them Z&#x27;s </span><br><span class="line">Hittin&#x27; hard and the girlies goin&#x27; crazy </span><br><span class="line">Vanilla&#x27;s on the mike, man I&#x27;m not lazy. </span><br><span class="line"></span><br><span class="line">I&#x27;m lettin&#x27; my drug kick in </span><br><span class="line">It controls my mouth and I begin </span><br><span class="line">To just let it flow, let my concepts go </span><br><span class="line">My posse&#x27;s to the side yellin&#x27;, Go Vanilla Go! </span><br><span class="line"></span><br><span class="line">Smooth &#x27;cause that&#x27;s the way I will be </span><br><span class="line">And if you don&#x27;t give a damn, then </span><br><span class="line">Why you starin&#x27; at me </span><br><span class="line">So get off &#x27;cause I control the stage </span><br><span class="line">There&#x27;s no dissin&#x27; allowed </span><br><span class="line">I&#x27;m in my own phase </span><br><span class="line">The girlies sa y they love me and that is ok </span><br><span class="line">And I can dance better than any kid n&#x27; play </span><br><span class="line"></span><br><span class="line">Stage 2 -- Yea the one ya&#x27; wanna listen to </span><br><span class="line">It&#x27;s off my head so let the beat play through </span><br><span class="line">So I can funk it up and make it sound good </span><br><span class="line">1-2-3 Yo -- Knock on some wood </span><br><span class="line">For good luck, I like my rhymes atrocious </span><br><span class="line">Supercalafragilisticexpialidocious </span><br><span class="line">I&#x27;m an effect and that you can bet </span><br><span class="line">I can take a fly girl and make her wet. </span><br><span class="line"></span><br><span class="line">I&#x27;m like Samson -- Samson to Delilah </span><br><span class="line">There&#x27;s no denyin&#x27;, You can try to hang </span><br><span class="line">But you&#x27;ll keep tryin&#x27; to get my style </span><br><span class="line">Over and over, practice makes perfect </span><br><span class="line">But not if you&#x27;re a loafer. </span><br><span class="line"></span><br><span class="line">You&#x27;ll get nowhere, no place, no time, no girls </span><br><span class="line">Soon -- Oh my God, homebody, you probably eat </span><br><span class="line">Spaghetti with a spoon! Come on and say it! </span><br><span class="line"></span><br><span class="line">VIP. Vanilla Ice yep, yep, I&#x27;m comin&#x27; hard like a rhino </span><br><span class="line">Intoxicating so you stagger like a wino </span><br><span class="line">So punks stop trying and girl stop cryin&#x27; </span><br><span class="line">Vanilla Ice is sellin&#x27; and you people are buyin&#x27; </span><br><span class="line">&#x27;Cause why the freaks are jockin&#x27; like Crazy Glue </span><br><span class="line">Movin&#x27; and groovin&#x27; trying to sing along </span><br><span class="line">All through the ghetto groovin&#x27; this here song </span><br><span class="line">Now you&#x27;re amazed by the VIP posse. </span><br><span class="line"></span><br><span class="line">Steppin&#x27; so hard like a German Nazi </span><br><span class="line">Startled by the bases hittin&#x27; ground </span><br><span class="line">There&#x27;s no trippin&#x27; on mine, I&#x27;m just gettin&#x27; down </span><br><span class="line">Sparkamatic, I&#x27;m hangin&#x27; tight like a fanatic </span><br><span class="line">You trapped me once and I thought that </span><br><span class="line">You might have it </span><br><span class="line">So step down and lend me your ear </span><br><span class="line">&#x27;89 in my time! You, &#x27;90 is my year. </span><br><span class="line"></span><br><span class="line">You&#x27;re weakenin&#x27; fast, YO! and I can tell it </span><br><span class="line">Your body&#x27;s gettin&#x27; hot, so, so I can smell it </span><br><span class="line">So don&#x27;t be mad and don&#x27;t be sad </span><br><span class="line">&#x27;Cause the lyrics belong to ICE, You can call me Dad </span><br><span class="line">You&#x27;re pitchin&#x27; a fit, so step back and endure </span><br><span class="line">Let the witch doctor, Ice, do the dance to cure </span><br><span class="line">So come up close and don&#x27;t be square </span><br><span class="line">You wanna battle me -- Anytime, anywhere </span><br><span class="line"></span><br><span class="line">You thought that I was weak, Boy, you&#x27;re dead wrong </span><br><span class="line">So come on, everybody and sing this song </span><br><span class="line"></span><br><span class="line">Say -- Play that funky music Say, go white boy, go white boy go </span><br><span class="line">play that funky music Go white boy, go white boy, go </span><br><span class="line">Lay down and boogie and play that funky music till you die. </span><br><span class="line"></span><br><span class="line">Play that funky music Come on, Come on, let me hear </span><br><span class="line">Play that funky music white boy you say it, say it </span><br><span class="line">Play that funky music A little louder now </span><br><span class="line">Play that funky music, white boy Come on, Come on, Come on </span><br><span class="line">Play that funky music</span><br></pre></td></tr></table></figure><h2 id="4-MTC3-Cracking-SHA1-Hashed-Passwords">4.MTC3 Cracking SHA1-Hashed Passwords</h2><p>题目链接(<a href="https://www.mysterytwisterc3.org/en/challenges/level-2/cracking-sha1-hashed-passwords">link</a>)</p><p>根据图片中键盘上的指纹分布，可以看出右边的数字键只有2486，很有可能是当做上下左右的功能，（常识这个应该是没有在密钥里的）所以就可以将密钥空间缩小。然后逐一写出剩余的可能按键，最后写一个dfs算法遍历每一种情况再用SHA1加密最后和给定哈希值比对。这里设置时钟得到运行时间为<code>1s</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">hash1 = <span class="string">&quot;67ae1a64661ac8b4494666f58c4822408dd0a3e4&quot;</span></span><br><span class="line">str2 = [[<span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;q&#x27;</span>], [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;w&#x27;</span>], [<span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;5&#x27;</span>], [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;(&#x27;</span>], [<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;0&#x27;</span>], [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;i&#x27;</span>], [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>], [<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;N&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha_encrypt</span>(<span class="params">string</span>):</span><br><span class="line">    sha = hashlib.sha1(string.encode())</span><br><span class="line">    <span class="keyword">return</span> sha.hexdigest()</span><br><span class="line"></span><br><span class="line">starttime = datetime.datetime.now()</span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> itertools.product(*str2):</span><br><span class="line">    <span class="keyword">for</span> perm <span class="keyword">in</span> itertools.permutations(combination):</span><br><span class="line">        candidate = <span class="string">&quot;&quot;</span>.join(perm)</span><br><span class="line">        <span class="keyword">if</span> sha_encrypt(candidate) == hash1:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ans:&quot;</span>, candidate)</span><br><span class="line">            endtime = datetime.datetime.now()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;t:&quot;</span>, (endtime - starttime).seconds, <span class="string">&quot;seconds&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Password not found.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="实验总结">实验总结</h2><p>本次试验我学会了编写简单的密码算法，对编码和加解密的过程更加熟悉。其中在第一个实验中我一开始是通过对亦或后明文的特征进行条件限制来爆破明文信息，但是总会有几位出现乱码，所以说我基于之前部分爆破的明文选择通过人为分析这些亦或后的明文特征，推测出最长的一条明文信息，最后得到密钥解密。</p><h2 id="源代码链接">源代码链接</h2><p><a href="https://github.com/cool-chicken/cryptography-exp/tree/main/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C%E4%B8%80">https://github.com/cool-chicken/cryptography-exp/tree/main/密码学实验一</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 密码学实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fermat素性检测算法</title>
      <link href="/Blog/2024/10/11/Fermat/"/>
      <url>/Blog/2024/10/11/Fermat/</url>
      
        <content type="html"><![CDATA[<h1>实 验 报 告（一）</h1><h1>Fermat素性检测算法</h1><h2 id="一、实验目的（包括实验环境、实现目标等等）">一、实验目的（包括实验环境、实现目标等等）</h2><p>1.实验环境：python 3.11.3<br>2.实验目标：理解 Fermat 素性检测算法的基本原理和费马小定理，并且编写相应程序实现对大数实现素数检验。</p><h2 id="二、方案设计">二、方案设计</h2><p>（包括背景、原理、必要的公式、图表、算法步骤等等）</p><p>背景：素性检测是判断一个数是否为素数的过程。素数在密码学、数论等领域有着重要的应用。本次实验旨在运用Fermat 素性检测来检验4个大数是否为素数。<br>原理：费马小定理指出若 p 为素数，并且 a 是一个小于 p 的整数，满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{p-1} \equiv 1 (mod p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span> 。基于此定理得到Fermat素性检测。<br>给定奇整数m≥3和安全参数k</p><p>（1）随机选取整数a,2≤a≤m-2；</p><p>（2）计算g=(a,m)，如果g=1，转(3);否则，跳出，m为合数；</p><p>（3）计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow><mi>r</mi><mo>=</mo><mi>a</mi></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">{r=a}^{m-1}(modm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>，如果r=1，m可能是素数，转（1）；否则，跳出，m为合数；</p><p>（4）重复上述过程k次，如果每次得到m可能为素数，则m为素数的概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msup><mn>2</mn><mi>k</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">1-\frac{1}{2^k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2025em;vertical-align:-0.3574em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.6426em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.782em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3574em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。</p><h2 id="三、方案实现">三、方案实现</h2><p>（包括算法流程图、主要函数的介绍、算法实现的主要代码等等）</p><p>流程图：</p><p><img src="/Blog/img/fermat.png" alt="图片的描述"></p><h3 id="主要函数介绍：">主要函数介绍：</h3><p>1.计算最大公约数的函数 <code>gcd(a,b)</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">   <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> a</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> gcd(b, a % b)</span><br></pre></td></tr></table></figure><p>这个运用迭代的思想，运用欧几里得算法不断地将每轮的余数和除数互换后相除更新余数的思想得到最终的最大公约数。</p><p>2．快速模指数算法<code>exponentiation(a, b, n)</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exponentiation</span>(<span class="params">a, b, n</span>):</span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line">    d = a % n</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        <span class="keyword">if</span> b % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            c = c * d % n</span><br><span class="line">        d = d * d % n</span><br><span class="line">        b //= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><p>在本函数中运用快速模指数算法，这个是用来计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">a^b\ mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span>的其中c用来存储每个阶段的中间变量，d用来存储每轮<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><msup><mn>2</mn><mi>i</mi></msup></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">a^{2^i}\ mod\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9945em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9945em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9021em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span>的数值。这样能够快速得到最终答案。<br>用<code>fermat(m,k)</code>函数来检验在安全系数为k的情况下m是否为素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">m,k</span>):</span><br><span class="line">    <span class="keyword">if</span> m % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> m &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;m必须是大于等于3的奇数&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    kk = k</span><br><span class="line">    <span class="keyword">while</span> k:</span><br><span class="line">        a = random.randint(<span class="number">2</span>, m - <span class="number">2</span>)</span><br><span class="line">        g = gcd(a, m)</span><br><span class="line">        <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;m是合数&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = exponentiation(a, m - <span class="number">1</span>, m)</span><br><span class="line">            <span class="keyword">if</span> r != <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;m是合数&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;m是素数的概率为<span class="subst">&#123;(<span class="number">1</span> - <span class="number">1</span> / <span class="number">2</span> ** kk) * <span class="number">100</span>&#125;</span>%&quot;</span>)</span><br></pre></td></tr></table></figure><p>主要思路是首先判断m是否为大于等于3的奇数，然后判断m和生成的随机数a是否互素，然后再计算r是否数值为1以此判断是否是合数，重复k论实验，若k论实验成功最终得到m为素数概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msup><mn>2</mn><mi>k</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">1-\frac{1}{2^k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2025em;vertical-align:-0.3574em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.6426em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.782em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3574em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，反之m为合数。</p><p>最后调用函数检验,主函数如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;4.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    m = <span class="built_in">int</span>(f.readline())</span><br><span class="line">    f.close()</span><br><span class="line">    k = <span class="number">10</span></span><br><span class="line">    fermat(m, k)</span><br></pre></td></tr></table></figure><h2 id="四、数据分析-包括算法测试数据的分析，运行结果截图等等">四、数据分析(包括算法测试数据的分析，运行结果截图等等)</h2><ol><li>对1.txt检验：k = 10</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">743476040059754298379331647007684224429004972336533937786799284757790400765316630522369642718204165253922832684184615021404737105614714107158733905598636152327037707290538422718453498125366750918857659068838460954633737911274770976191590193809661578032117496009853673140977556559136466107768672598883924301125589893895001253674886100289402530711221893</span><br></pre></td></tr></table></figure><p><img src="/Blog/img/image.png" alt="alt text"></p><ol start="2"><li>对2.txt检验：k = 10</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5434520625653357625890820149570485819447986258433769976634917091398967074086679540928507095017715540385352266035820823142060119390272763774034231321959236056764511968630360067353876686142517564224926196131349204754111599877101485686283117193149781387816214484583521923017500621725053392290279263586984207169423800476914654441473576611460323772832328657</span><br></pre></td></tr></table></figure><p><img src="/Blog/img/image-1.png" alt="alt text"></p><ol start="3"><li>对3.txt检验：k = 10</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">876147742992673125957404768949712978720573116974723188491435550196169965040848206868200084918233743662847668000971402407461887306389122707315529364807593342507936022301657320206278702095378618110195051280478534126716517153056984269659532882692418682262081495725304483536777013188527470348249542840277926802938912332306310470632601156641005608958891</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/Blog/img/image-2.png" alt="alt text"></p><ol start="4"><li>对4.txt检验：k = 10</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9876147742992673125957404768949712978720573116974723188491435550196169965040848206868200084918233743662847668000971402407461887306389122707315529364807593342507936022301657320206278702095378618110195051280478534126716517153056984269659532882692418682262081495725304483536777013188527470348249542840277926802938912332306310470632601156641005608958891</span><br></pre></td></tr></table></figure><p><img src="/Blog/img/image-3.png" alt="alt text"></p><h2 id="五、思考与总结">五、思考与总结</h2><pre><code>如果有一个整数𝒂，(𝒂,𝒎)=𝟏，使得𝒂^𝒎−𝟏≡𝟏 𝒎𝒐𝒅 𝒎 则𝒎一定是一个素数吗？为什么？（请简述并举例说明，不能只简单回答“是”或“不是”）  </code></pre><p>答：m不一定是素数，因为费马小定理是规定m 是一个素数，那么对于任何整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">(</mo><mn>1</mn><mtext> </mtext><mo>&lt;</mo><mtext> </mtext><mi>a</mi><mtext> </mtext><mo>&lt;</mo><mtext> </mtext><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a (1\ &lt;\ a\ &lt;\ m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>，都有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>1</mn><mtext> </mtext><mrow><mo fence="true">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">a^{m-1} \equiv 1\ \left(mod\  m\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>，但反过来并不一定成立。存在一些合数 m 也满足上述条件，是伪素数。<br>比如：我们取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><mn>341</mn><mo separator="true">,</mo><mi>a</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">m = 341, a = 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">341</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>,很明显<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">(a,m)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> ,但是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mn>341</mn><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>1</mn><mtext> </mtext><mrow><mo fence="true">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mn>341</mn><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">2^{341-1}\equiv1\ \left(mod\ 341\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">341</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord">341</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 又因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>341</mn><mtext> </mtext><mo>=</mo><mtext> </mtext><mn>11</mn><mtext> </mtext><mo>×</mo><mtext> </mtext><mn>31</mn></mrow><annotation encoding="application/x-tex">341\ =\ 11\ \times\ 31</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">341</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">11</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">31</span></span></span></span> 可以说明m是合数。</p><pre><code>Fermat素性检测中都用到了哪些运算？分别实现什么功能？请简述。</code></pre><p>答：运用了用欧几里得算法求最大公约数，用来检验随机生成的a是否和m互素。运用了快速模指数算法运算，用来快速计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>=</mo><mi>a</mi><mi>m</mi><mo>−</mo><mn>1</mn><mo>≡</mo><mn>1</mn><mi>m</mi><mi>o</mi><mi>d</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">r = am-1≡1 mod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">am</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">1</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">m</span></span></span></span>的数值，判断m是否为合数。</p><pre><code>你还了解哪种素性检测算法？请简述，并分析其与Fermat素性检测算法的区别与联系。</code></pre><p>答： Miller-Rabin 素性检测算法，它是一种基于随机性的概率素性检测算法。也是多次测试来判断一个数是否为素数。<br>算法：</p><ol><li><p>检查m是否为 2 或 3，如果是，则 n 是素数。检查 n 是否为偶数或小于 2，如果是，则 n 是合数。</p></li><li><p>将待检测的数 m 写成$\ m\ =\ d\ \times\ 2^r\ +\ 1$的形式，d为奇数。</p></li><li><p>进行 k 次测试：</p><p>(1)随机选择一个整数 a，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mtext> </mtext><mo>&lt;</mo><mtext> </mtext><mi>a</mi><mtext> </mtext><mo>&lt;</mo><mtext> </mtext><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1\ &lt;\ a\ &lt;\ m-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><p>(2)计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>a</mi><mi>d</mi></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">x\ =\ a^d\ mod\ m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">m</span></span></span></span>。如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x = m-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，则 m 可能是素数。则继续下一次测试转到(1);否则重复计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext> </mtext><mi>x</mi><mtext> </mtext><mo>=</mo><mtext> </mtext><msup><mi>x</mi><mn>2</mn></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">\ x\ =\ x^2\ mod\ m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mord mathnormal">m</span></span></span></span>，最多重复<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">r-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>次。如果在任何一次计算中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x=m-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，则继续下一次测试转到(1)。如果所有测试都未通过，则m是合数。</p><p>(3)如果 k 次测试都通过，则m可能是素数,m为素数概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msup><mn>4</mn><mi>k</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">1-\frac{1}{4^k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2025em;vertical-align:-0.3574em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.6426em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.782em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3574em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li></ol><p>区别：</p><p>Fermat 素性检测只进行一次幂模运算，而 Miller-Rabin 进行多次幂模运算，检测更严格。Fermat 素性检测容易被费马伪素数欺骗，而 Miller-Rabin 通过多次检测减少了伪素数的概率。并且在安全参数为k的情况下Fermat 素性检测正确概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msup><mn>2</mn><mi>k</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">1-\frac{1}{2^k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2025em;vertical-align:-0.3574em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.6426em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.782em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3574em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，而Miller-Rabin正确概率是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msup><mn>4</mn><mi>k</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">1-\frac{1}{4^k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2025em;vertical-align:-0.3574em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.6426em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.782em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3574em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>联系：</p><p>两者都是随机性的概率素性检测的算法，并且都使用模指数运算来检验是否是素数。</p><pre><code>实验过程中还遇到了什么问题，如何解决的？通过该实验有何收获？</code></pre><p>答：在快速模指数函数编写的时候起初运行的很慢，后来我发现是我在每轮生成中间变量<code>b_n</code>的时候没有用取余数之后的值进行平方运算。后来改正后速度得到了提高。经过本实验我深入理解了 Fermat 素性检测算法的原理和实现过程。学会了如何使用快速幂算法进行高效的大整数运算。此外还了解了Miller-Rabin 素性检测算法。</p><h2 id="实验完整代码">实验完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(b, a % b)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exponentiation</span>(<span class="params">a, b, n</span>):</span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line">    d = a % n</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        <span class="keyword">if</span> b % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            c = c * d % n</span><br><span class="line">        d = d * d % n</span><br><span class="line">        b //= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="comment"># print(exponentiation(312,13,667))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">m,k</span>):</span><br><span class="line">    <span class="keyword">if</span> m % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> m &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;m必须是大于等于3的奇数&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    kk = k</span><br><span class="line">    <span class="keyword">while</span> k:</span><br><span class="line">        a = random.randint(<span class="number">2</span>, m - <span class="number">2</span>)</span><br><span class="line">        g = gcd(a, m)</span><br><span class="line">        <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;m是合数&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = exponentiation(a, m - <span class="number">1</span>, m)</span><br><span class="line">            <span class="keyword">if</span> r != <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;m是合数&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;m是素数的概率为<span class="subst">&#123;(<span class="number">1</span> - <span class="number">1</span> / <span class="number">2</span> ** kk) * <span class="number">100</span>&#125;</span>%&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;4.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    m = <span class="built_in">int</span>(f.readline())</span><br><span class="line">    f.close()</span><br><span class="line">    k = <span class="number">10</span></span><br><span class="line">    fermat(m, k)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 信息安全基础与密码学综合实验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>友链</title>
      <link href="/Blog/link/index.html"/>
      <url>/Blog/link/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="友链">友链</h2><div style="display: flex; align-items: center; padding-left: 10px;">  <img src="https://selen-suyue.github.io/images/favicon.ico" alt="友链" width="50" height="50" style="margin-right: 10px;margin-left: 10px">  <div>    <strong>Selen Su</strong><br>    <a href="https://selen-suyue.github.io">Selen的个人主页</a><br>    cool-chicken的high school好homie，一个隐藏大佬～  </div></div>]]></content>
      
    </entry>
    
    
  
</search>
