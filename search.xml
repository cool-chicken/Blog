<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/12/hello-world/"/>
      <url>/2024/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my crypto-1</title>
      <link href="/2024/10/12/my-crypto-1/"/>
      <url>/2024/10/12/my-crypto-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Many-Time-Pad">1. Many Time Pad</h2><p>Coursera Dan Boneh Week 1 Program Assignment（<a href="https://www.coursera.org/learn/crypto/quiz/KZ9js/week-1-programming-assignment-optional">link</a>）</p><h3 id="题目分析">题目分析</h3><p>题目中11个密文均应用了相同的密钥我们知道：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>=</mo><mi>k</mi><mo>⊕</mo><msub><mi>m</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo>=</mo><mi>k</mi><mo>⊕</mo><msub><mi>m</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>c</mi><mn>2</mn></msub><mo>=</mo><msub><mi>m</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>m</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">c_{1}=k \oplus m_{1},c_{2}=k \oplus m_{2},c_{1}\oplus c_{2}=m_{1}\oplus m_{2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>根据提示中的考虑空格与 [a-zA-Z] 字符进行亦或运算会改变大小写（a变成A，B变成b）我们可以设置一个判断函数<code>magic()</code>：如果运算结果是0则是相同字符亦或运算，若是合法字符则是一个合法字符和空格运算，其余结果用输出’_'来标记。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">magic</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">if</span> c == <span class="number">0</span>:  <span class="comment"># same (&#x27;A&#x27; xor &#x27;A&#x27; = &#x27;\x00&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(c) <span class="keyword">in</span> string.ascii_letters:  <span class="comment"># space xor letter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;_&#x27;</span></span><br></pre></td></tr></table></figure><p>然后我们来运行以上步骤，通过把11个密文分别两两亦或得到带有提示符的明文亦或结果，然后通过提示字段猜测最长的那个明文具体值（也就是第7个明文（编号为6））</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c1, c2 <span class="keyword">in</span> combinations(MSGS, <span class="number">2</span>):</span><br><span class="line">   xm = strxor(<span class="built_in">bytes</span>.fromhex(c1), <span class="built_in">bytes</span>.fromhex(c2))</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;&#123;:2&#125; &#123;:2&#125;&#x27;</span>.<span class="built_in">format</span>(MSGS.index(c1), MSGS.index(c2)), <span class="string">&#x27;&#x27;</span>.join(magic(i) <span class="keyword">for</span> i <span class="keyword">in</span> xm))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就是繁琐的猜测明文过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># KEY = strxor(bytes.fromhex(MSGS[10]), b&#x27;The &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[5]), b&#x27;There are &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[3]), b&#x27;The ciphertext &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[10]), b&#x27;The secret message is &#x27;)  # The end is not correct</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[5]), b&#x27;There are two types of &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[7]), b&#x27;We can see the point where &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[7]), b&#x27; The Concise OxfordDictionaries &#x27;)  # Interesting; Step back</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[5]), b&#x27;There are two types of crypto&#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[6]), b&#x27;There are two types of cyptography&#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[0]), b&#x27;We can factor the number 15 with quantum&#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[3]), b&#x27;The ciphertext produced by a weak encryption &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[10]), b&#x27;The secret message is: When using a stream cipher&#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[3]), b&#x27;The ciphertext produced by a weak encryption algorithm &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[10]), b&#x27;The secret message is: When using a stream cipher, never use &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[6]), b&#x27;There are two types of cyptography: one that allows the Government &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[0]), b&#x27;We can factor the number 15 with quantum computers. We can also factor &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[10]), b&#x27;The secret message is: When using a stream cipher, never use the key more than &#x27;)</span><br><span class="line"># KEY = strxor(bytes.fromhex(MSGS[3]), b&#x27;The ciphertext produced by a weak encryption algorithm looks as good as ciphertext &#x27;)</span><br></pre></td></tr></table></figure><p>最后得到最长的明文是<code>There are two types of cyptography: one that allows the Government to use brute force to break the code, and one that requires the Government to use brute force to break you</code>通过亦或得到密钥最后解出<strong>最终答案</strong>。</p><p><font color = Red><strong>The secret message is: When using a stream cipher, never use the key more than once</strong></font></p><h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">MSGS = (</span><br><span class="line">    <span class="string">&#x27;315c4eeaa8b5f8aaf9174145bf43e1784b8fa00dc71d885a804e5ee9fa40b16349c146fb778cdf2d3aff021dfff5b403b510d0d0455468aeb98622b137dae857553ccd8883a7bc37520e06e515d22c954eba5025b8cc57ee59418ce7dc6bc41556bdb36bbca3e8774301fbcaa3b83b220809560987815f65286764703de0f3d524400a19b159610b11ef3e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;234c02ecbbfbafa3ed18510abd11fa724fcda2018a1a8342cf064bbde548b12b07df44ba7191d9606ef4081ffde5ad46a5069d9f7f543bedb9c861bf29c7e205132eda9382b0bc2c5c4b45f919cf3a9f1cb74151f6d551f4480c82b2cb24cc5b028aa76eb7b4ab24171ab3cdadb8356f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;32510ba9a7b2bba9b8005d43a304b5714cc0bb0c8a34884dd91304b8ad40b62b07df44ba6e9d8a2368e51d04e0e7b207b70b9b8261112bacb6c866a232dfe257527dc29398f5f3251a0d47e503c66e935de81230b59b7afb5f41afa8d661cb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;32510ba9aab2a8a4fd06414fb517b5605cc0aa0dc91a8908c2064ba8ad5ea06a029056f47a8ad3306ef5021eafe1ac01a81197847a5c68a1b78769a37bc8f4575432c198ccb4ef63590256e305cd3a9544ee4160ead45aef520489e7da7d835402bca670bda8eb775200b8dabbba246b130f040d8ec6447e2c767f3d30ed81ea2e4c1404e1315a1010e7229be6636aaa&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3f561ba9adb4b6ebec54424ba317b564418fac0dd35f8c08d31a1fe9e24fe56808c213f17c81d9607cee021dafe1e001b21ade877a5e68bea88d61b93ac5ee0d562e8e9582f5ef375f0a4ae20ed86e935de81230b59b73fb4302cd95d770c65b40aaa065f2a5e33a5a0bb5dcaba43722130f042f8ec85b7c2070&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;32510bfbacfbb9befd54415da243e1695ecabd58c519cd4bd2061bbde24eb76a19d84aba34d8de287be84d07e7e9a30ee714979c7e1123a8bd9822a33ecaf512472e8e8f8db3f9635c1949e640c621854eba0d79eccf52ff111284b4cc61d11902aebc66f2b2e436434eacc0aba938220b084800c2ca4e693522643573b2c4ce35050b0cf774201f0fe52ac9f26d71b6cf61a711cc229f77ace7aa88a2f19983122b11be87a59c355d25f8e4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;32510bfbacfbb9befd54415da243e1695ecabd58c519cd4bd90f1fa6ea5ba47b01c909ba7696cf606ef40c04afe1ac0aa8148dd066592ded9f8774b529c7ea125d298e8883f5e9305f4b44f915cb2bd05af51373fd9b4af511039fa2d96f83414aaaf261bda2e97b170fb5cce2a53e675c154c0d9681596934777e2275b381ce2e40582afe67650b13e72287ff2270abcf73bb028932836fbdecfecee0a3b894473c1bbeb6b4913a536ce4f9b13f1efff71ea313c8661dd9a4ce&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;315c4eeaa8b5f8bffd11155ea506b56041c6a00c8a08854dd21a4bbde54ce56801d943ba708b8a3574f40c00fff9e00fa1439fd0654327a3bfc860b92f89ee04132ecb9298f5fd2d5e4b45e40ecc3b9d59e9417df7c95bba410e9aa2ca24c5474da2f276baa3ac325918b2daada43d6712150441c2e04f6565517f317da9d3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;271946f9bbb2aeadec111841a81abc300ecaa01bd8069d5cc91005e9fe4aad6e04d513e96d99de2569bc5e50eeeca709b50a8a987f4264edb6896fb537d0a716132ddc938fb0f836480e06ed0fcd6e9759f40462f9cf57f4564186a2c1778f1543efa270bda5e933421cbe88a4a52222190f471e9bd15f652b653b7071aec59a2705081ffe72651d08f822c9ed6d76e48b63ab15d0208573a7eef027&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;466d06ece998b7a2fb1d464fed2ced7641ddaa3cc31c9941cf110abbf409ed39598005b3399ccfafb61d0315fca0a314be138a9f32503bedac8067f03adbf3575c3b8edc9ba7f537530541ab0f9f3cd04ff50d66f1d559ba520e89a2cb2a83&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;32510ba9babebbbefd001547a810e67149caee11d945cd7fc81a05e9f85aac650e9052ba6a8cd8257bf14d13e6f0a803b54fde9e77472dbff89d71b57bddef121336cb85ccb8f3315f4b52e301d16e9f52f904&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">strxor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) &gt; <span class="built_in">len</span>(b):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a[:<span class="built_in">len</span>(b)], b)])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>([x ^ y <span class="keyword">for</span> (x, y) <span class="keyword">in</span> <span class="built_in">zip</span>(a, b[:<span class="built_in">len</span>(a)])])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magic</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="keyword">if</span> c == <span class="number">0</span>:  <span class="comment"># same (&#x27;A&#x27; xor &#x27;A&#x27; = &#x27;\x00&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(c) <span class="keyword">in</span> string.ascii_letters:  <span class="comment"># space xor letter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">chr</span>(c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;_&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c1, c2 <span class="keyword">in</span> combinations(MSGS, <span class="number">2</span>):</span><br><span class="line">        xm = strxor(<span class="built_in">bytes</span>.fromhex(c1), <span class="built_in">bytes</span>.fromhex(c2))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;:2&#125; &#123;:2&#125;&#x27;</span>.<span class="built_in">format</span>(MSGS.index(c1), MSGS.index(c2)), <span class="string">&#x27;&#x27;</span>.join(magic(i) <span class="keyword">for</span> i <span class="keyword">in</span> xm))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n开始猜明文～（很显然先猜大部分都是_的字母，然后疯狂填字）\n&#x27;</span>)</span><br><span class="line">    KEY = strxor(<span class="built_in">bytes</span>.fromhex(MSGS[<span class="number">6</span>]), <span class="string">b&#x27;There are two types of cyptography: one that allows the Government to use brute force to break the code, and one that requires the Government to use brute force to break you&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x, m <span class="keyword">in</span> <span class="built_in">enumerate</span>(MSGS):</span><br><span class="line">        <span class="built_in">print</span>(x, strxor(<span class="built_in">bytes</span>.fromhex(m), KEY).decode(encoding= <span class="string">&#x27;utf-8&#x27;</span>,errors=<span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(KEY.<span class="built_in">hex</span>())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="2-PA1-option">2. PA1 option</h2><p>Write a program that allows you to “crack” ciphertexts generated using a Vigenere-like cipher, where byte-wise XOR is used instead of addition modulo 26.</p><h3 id="题目分析-2">题目分析</h3><p>简单来说就是解密vigenere的密码，但是其中运算过程是使用逐字节异或而不是加法模26。<br>所以我们首先需要得到密钥<code>key</code>，所以我们要定义一个寻找可能密钥字符的函数<code>find_index_key(sub_arr)</code>。这里定义all_key为所有可能的字符，包括字母、数字、逗号、点和空格。初始化两个列表test_key和possible_key。遍历test_key中的每个值（ASCII字符），并对sub_arr中的每个字节进行亦或，如果结果不在all_key中，则将该ASCII值从possible_key中移除。最后返回possible_key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_index_key</span>(<span class="params">sub_arr</span>): </span><br><span class="line">    all_key = ascii_letters + digits + <span class="string">&#x27;,&#x27;</span> + <span class="string">&#x27;.&#x27;</span> + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    test_key = []</span><br><span class="line">    possible_key = []</span><br><span class="line">    <span class="comment"># 遍历整个ascii码(0-127)</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x00</span>, <span class="number">0xFF</span>):</span><br><span class="line">        test_key.append(x)</span><br><span class="line">        possible_key.append(x)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> test_key:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> sub_arr:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">chr</span>(i ^ j) <span class="keyword">not</span> <span class="keyword">in</span> all_key:</span><br><span class="line">                possible_key.remove(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> possible_key</span><br></pre></td></tr></table></figure><p>然后遍历<code>key</code>的长度，然后和密文进行亦或运算查看可能的密钥可能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key_len <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        sub_arr = ct[index::key_len]  </span><br><span class="line">        possible_ch = find_index_key(sub_arr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;key_len = &#x27;</span>, key_len, <span class="string">&#x27;index = &#x27;</span>, index, <span class="string">&#x27;possible_ch = &#x27;</span>, possible_ch)</span><br><span class="line">        <span class="keyword">if</span> possible_ch:</span><br><span class="line">            k = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> possible_ch:</span><br><span class="line">                k.append(<span class="built_in">chr</span>(j ^ sub_arr[<span class="number">0</span>]))</span><br><span class="line">            <span class="built_in">print</span>(k)</span><br></pre></td></tr></table></figure><p>输出的部分结果如下（这里的index便于定位密钥的位置）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">key_len =  7 index =  0 possible_ch =  [186]</span><br><span class="line">[&#x27;C&#x27;]</span><br><span class="line">key_len =  7 index =  1 possible_ch =  [31]</span><br><span class="line">[&#x27;r&#x27;]</span><br><span class="line">key_len =  7 index =  2 possible_ch =  [145]</span><br><span class="line">[&#x27;y&#x27;]</span><br><span class="line">key_len =  7 index =  3 possible_ch =  [178]</span><br><span class="line">[&#x27;p&#x27;]</span><br><span class="line">key_len =  7 index =  4 possible_ch =  [83]</span><br><span class="line">[&#x27;t&#x27;]</span><br><span class="line">key_len =  7 index =  5 possible_ch =  [205]</span><br><span class="line">[&#x27;o&#x27;]</span><br><span class="line">key_len =  7 index =  6 possible_ch =  [62]</span><br><span class="line">[&#x27;g&#x27;]</span><br></pre></td></tr></table></figure><p>得到关键的密钥<code>key = [186, 31, 145, 178, 83, 205, 62]</code><br>最后带入就能解出明文，<strong>最终答案</strong></p><p><font color = Red><strong>Cryptography is the practice and study of techniques for, among other things, secure communication in the presence of attackers. Cryptography has been used for hundreds, if not thousands, of years, but traditional cryptosystems were designed and evaluated in a fairly ad hoc manner. For example, the Vigenere encryption scheme was thought to be secure for decades after it was invented, but we now know, and this exercise demonstrates, that it can be broken very easily.</strong></font></p><h3 id="完整代码-2">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters, digits</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_index_key</span>(<span class="params">sub_arr</span>): </span><br><span class="line">    all_key = ascii_letters + digits + <span class="string">&#x27;,&#x27;</span> + <span class="string">&#x27;.&#x27;</span> + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    test_key = []</span><br><span class="line">    possible_key = []</span><br><span class="line">    <span class="comment"># 遍历整个ascii码(0-127)</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x00</span>, <span class="number">0xFF</span>):</span><br><span class="line">        test_key.append(x)</span><br><span class="line">        possible_key.append(x)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> test_key:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> sub_arr:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">chr</span>(i ^ j) <span class="keyword">not</span> <span class="keyword">in</span> all_key:</span><br><span class="line">                possible_key.remove(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> possible_key</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;F96DE8C227A259C87EE1DA2AED57C93FE5DA36ED4EC87EF2C63AAE5B9A7EFFD673BE4ACF7BE8923CAB1ECE7AF2DA3DA44FCF7AE29235A24C963FF0DF3CA3599A70E5DA36BF1ECE77F8DC34BE129A6CF4D126BF5B9A7CFEDF3EB850D37CF0C63AA2509A76FF9227A55B9A6FE3D720A850D97AB1DD35ED5FCE6BF0D138A84CC931B1F121B44ECE70F6C032BD56C33FF9D320ED5CDF7AFF9226BE5BDE3FF7DD21ED56CF71F5C036A94D963FF8D473A351CE3FE5DA3CB84DDB71F5C17FED51DC3FE8D732BF4D963FF3C727ED4AC87EF5DB27A451D47EFD9230BF47CA6BFEC12ABE4ADF72E29224A84CDF3FF5D720A459D47AF59232A35A9A7AE7D33FB85FCE7AF5923AA31EDB3FF7D33ABF52C33FF0D673A551D93FFCD33DA35BC831B1F43CBF1EDF67F0DF23A15B963FE5DA36ED68D378F4DC36BF5B9A7AFFD121B44ECE76FEDC73BE5DD27AFCD773BA5FC93FE5DA3CB859D26BB1C63CED5CDF3FE2D730B84CDF3FF7DD21ED5ADF7CF0D636BE1EDB79E5D721ED57CE3FE6D320ED57D469F4DC27A85A963FF3C727ED49DF3FFFDD24ED55D470E69E73AC50DE3FE5DA3ABE1EDF67F4C030A44DDF3FF5D73EA250C96BE3D327A84D963FE5DA32B91ED36BB1D132A31ED87AB1D021A255DF71B1C436BF479A7AF0C13AA14794&quot;</span></span><br><span class="line">ct = <span class="built_in">bytes</span>.fromhex(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key_len <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(key_len):</span><br><span class="line">        sub_arr = ct[index::key_len]  </span><br><span class="line">        possible_ch = find_index_key(sub_arr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;key_len = &#x27;</span>, key_len, <span class="string">&#x27;index = &#x27;</span>, index, <span class="string">&#x27;possible_ch = &#x27;</span>, possible_ch)</span><br><span class="line">        <span class="keyword">if</span> possible_ch:</span><br><span class="line">            k = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> possible_ch:</span><br><span class="line">                k.append(<span class="built_in">chr</span>(j ^ sub_arr[<span class="number">0</span>]))</span><br><span class="line">            <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line">key = [<span class="number">186</span>, <span class="number">31</span>, <span class="number">145</span>, <span class="number">178</span>, <span class="number">83</span>, <span class="number">205</span>, <span class="number">62</span>]</span><br><span class="line">pt = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ct)):</span><br><span class="line">    pt += <span class="built_in">chr</span>(ct[i] ^ key[i % <span class="number">7</span>])</span><br><span class="line"><span class="built_in">print</span>(pt)</span><br></pre></td></tr></table></figure><h2 id="3-Crypto-Challenge-Set-1-link">3.Crypto Challenge Set 1(<a href="http://www.cryptopals.com/sets/1">link</a>)</h2><h3 id="1-Convert-hex-to-base64">(1)Convert hex to base64</h3><p>如题就是把十六进制转化为base64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_base64</span>(<span class="params">hex_data</span>):</span><br><span class="line">    base64_string = base64.b64encode(<span class="built_in">bytes</span>.fromhex(hex_data)).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> base64_string</span><br></pre></td></tr></table></figure><h3 id="2-Fixed-XOR">(2)Fixed XOR</h3><p>等长亦或运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fixed_xor</span>(<span class="params">hex_str1, hex_str2</span>):</span><br><span class="line">    byte_str1 = <span class="built_in">bytes</span>.fromhex(hex_str1)</span><br><span class="line">    byte_str2 = <span class="built_in">bytes</span>.fromhex(hex_str2)</span><br><span class="line">    xor_result = <span class="built_in">bytes</span>([b1 ^ b2 <span class="keyword">for</span> b1, b2 <span class="keyword">in</span> <span class="built_in">zip</span>(byte_str1, byte_str2)])</span><br><span class="line">    hex_result = xor_result.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> hex_result</span><br></pre></td></tr></table></figure><h3 id="3-Single-byte-XOR-cipher">(3)Single-byte XOR cipher</h3><p>因为是单个字节的亦或密码，并且选取字母分数最高的密钥，所以遍历所有的<code>key</code>。选取明文中英文字符占比分数最大的明文和密钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_single_byte_xor</span>(<span class="params">cipher_hex</span>):</span><br><span class="line">    cipher_bytes = codecs.decode(cipher_hex, <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_english</span>(<span class="params">text</span>):</span><br><span class="line">        <span class="keyword">return</span> text.isascii() <span class="keyword">and</span> text.isprintable()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">english_score</span>(<span class="params">text</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> char <span class="keyword">in</span> text <span class="keyword">if</span> char.isalpha())</span><br><span class="line">    best_key = <span class="literal">None</span></span><br><span class="line">    best_score = -<span class="number">1</span></span><br><span class="line">    best_plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        decrypted = <span class="built_in">bytes</span>([cipher_bytes[i] ^ key <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_bytes))])</span><br><span class="line">        decrypted_text = decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> is_english(decrypted_text):</span><br><span class="line">            score = english_score(decrypted_text)</span><br><span class="line">            <span class="keyword">if</span> score &gt; best_score:</span><br><span class="line">                best_score = score</span><br><span class="line">                best_key = key</span><br><span class="line">                best_plaintext = decrypted_text</span><br><span class="line">    <span class="keyword">return</span> best_plaintext, best_key</span><br><span class="line"></span><br><span class="line">cipher_hex = <span class="string">&quot;1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736&quot;</span></span><br><span class="line">decrypted_text, key = decrypt_single_byte_xor(cipher_hex)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Text:&quot;</span>, decrypted_text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Key:&quot;</span>, <span class="built_in">hex</span>(key))</span><br></pre></td></tr></table></figure><p>运行代码解出答案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Decrypted Text: Cooking MC&#x27;s like a pound of bacon</span><br><span class="line">Key: 0x58</span><br></pre></td></tr></table></figure><h3 id="4-Detect-single-character-XOR">(4)Detect single-character XOR</h3><p>这个引入上一问的函数并且加入字符频次表。通过逐行读取密文并且应用单字符密钥得到每行最高分数的key。最后选取出最高分数的明文作为答案输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_english_score</span>(<span class="params">input_bytes</span>):</span><br><span class="line">    character_frequencies = &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="number">.08167</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">.01492</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">.02782</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">.04253</span>,</span><br><span class="line">        <span class="string">&#x27;e&#x27;</span>: <span class="number">.12702</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">.02228</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">.02015</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">.06094</span>,</span><br><span class="line">        <span class="string">&#x27;i&#x27;</span>: <span class="number">.06094</span>, <span class="string">&#x27;j&#x27;</span>: <span class="number">.00153</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">.00772</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">.04025</span>,</span><br><span class="line">        <span class="string">&#x27;m&#x27;</span>: <span class="number">.02406</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">.06749</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">.07507</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">.01929</span>,</span><br><span class="line">        <span class="string">&#x27;q&#x27;</span>: <span class="number">.00095</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">.05987</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">.06327</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">.09056</span>,</span><br><span class="line">        <span class="string">&#x27;u&#x27;</span>: <span class="number">.02758</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">.00978</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">.02360</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">.00150</span>,</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>: <span class="number">.01974</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">.00074</span>, <span class="string">&#x27; &#x27;</span>: <span class="number">.13000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([character_frequencies.get(<span class="built_in">chr</span>(byte), <span class="number">0</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> input_bytes.lower()])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_char_xor</span>(<span class="params">input_bytes, char_value</span>):</span><br><span class="line">    output_bytes = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> input_bytes:</span><br><span class="line">        output_bytes += <span class="built_in">bytes</span>([byte ^ char_value])</span><br><span class="line">    <span class="keyword">return</span> output_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruteforce_single_char_xor</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    potential_messages = []</span><br><span class="line">    <span class="keyword">for</span> key_value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        message = single_char_xor(ciphertext, key_value)</span><br><span class="line">        score = get_english_score(message)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: message,</span><br><span class="line">            <span class="string">&#x27;score&#x27;</span>: score,</span><br><span class="line">            <span class="string">&#x27;key&#x27;</span>: key_value</span><br><span class="line">        &#125;</span><br><span class="line">        potential_messages.append(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(potential_messages, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;score&#x27;</span>], reverse=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_xor_cipher</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()</span><br><span class="line">        best_plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">        best_key = <span class="literal">None</span></span><br><span class="line">        best_score = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            cipher_hex = line.strip()</span><br><span class="line">            ciphertext = <span class="built_in">bytes</span>.fromhex(cipher_hex)</span><br><span class="line">            result = bruteforce_single_char_xor(ciphertext)</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;score&#x27;</span>] &gt; best_score:</span><br><span class="line">                best_score = result[<span class="string">&#x27;score&#x27;</span>]</span><br><span class="line">                best_plaintext = result[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">                best_key = result[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> best_plaintext, <span class="built_in">hex</span>(best_key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    file_path = <span class="string">&quot;plain.txt&quot;</span></span><br><span class="line">    detected_plaintext, key = detect_xor_cipher(file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;plaintext: &quot;</span>,detected_plaintext.decode())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key: <span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><strong>最终答案</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plaintext:  Now that the party is jumping</span><br><span class="line"></span><br><span class="line">Key: 0x35</span><br></pre></td></tr></table></figure><h3 id="5-Implement-repeating-key-XOR">(5)Implement repeating-key XOR</h3><p>这个就是重复密钥进行亦或操作，代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">plaintext, key</span>):</span><br><span class="line">    repeated_key = (key * (<span class="built_in">len</span>(plaintext) // <span class="built_in">len</span>(key))) + key[:<span class="built_in">len</span>(plaintext) % <span class="built_in">len</span>(key)]</span><br><span class="line">    encrypted_decrypted = <span class="built_in">bytes</span>([p ^ k <span class="keyword">for</span> p, k <span class="keyword">in</span> <span class="built_in">zip</span>(plaintext.encode(), repeated_key.encode())])</span><br><span class="line">    <span class="keyword">return</span> encrypted_decrypted.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">&#x27;&#x27;&#x27;Burning &#x27;em, if you ain&#x27;t quick and nimble I go crazy when I hear a cymbal&#x27;&#x27;&#x27;</span></span><br><span class="line">key = <span class="string">&quot;ICE&quot;</span></span><br><span class="line">encrypted1 = xor(plaintext, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encrypted:&quot;</span>, encrypted1)</span><br></pre></td></tr></table></figure><h3 id="6-Break-repeating-key-XOR">(6)Break repeating-key XOR</h3><p>首先要猜测密钥的长度这里范围由题目所述（2到40），设置了计算汉明距离的函数<code>hamming_distance(a, b)</code>其后继承上述题目的代码得到最高字符频次分数的密码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">English_Scoring</span>(<span class="params">t</span>):</span><br><span class="line">    letter_frequency = &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="number">.08167</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">.01492</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">.02782</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">.04253</span>,</span><br><span class="line">        <span class="string">&#x27;e&#x27;</span>: <span class="number">.12702</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">.02228</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">.02015</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">.06094</span>,</span><br><span class="line">        <span class="string">&#x27;i&#x27;</span>: <span class="number">.06094</span>, <span class="string">&#x27;j&#x27;</span>: <span class="number">.00153</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">.00772</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">.04025</span>,</span><br><span class="line">        <span class="string">&#x27;m&#x27;</span>: <span class="number">.02406</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">.06749</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">.07507</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">.01929</span>,</span><br><span class="line">        <span class="string">&#x27;q&#x27;</span>: <span class="number">.00095</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">.05987</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">.06327</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">.09056</span>,</span><br><span class="line">        <span class="string">&#x27;u&#x27;</span>: <span class="number">.02758</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">.00978</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">.02360</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">.00150</span>,</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>: <span class="number">.01974</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">.00074</span>, <span class="string">&#x27; &#x27;</span>: <span class="number">.15000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([letter_frequency.get(<span class="built_in">chr</span>(i), <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> t.lower()])  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Single_XOR</span>(<span class="params">s, single_character</span>):</span><br><span class="line">    t = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        t += <span class="built_in">bytes</span>([i ^ single_character])</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ciphertext_XOR</span>(<span class="params">s</span>):</span><br><span class="line">    _data = []</span><br><span class="line">    <span class="keyword">for</span> single_character <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        ciphertext = Single_XOR(s, single_character)</span><br><span class="line">        score = English_Scoring(ciphertext)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;Single character&#x27;</span>: single_character,</span><br><span class="line">            <span class="string">&#x27;ciphertext&#x27;</span>: ciphertext,</span><br><span class="line">            <span class="string">&#x27;score&#x27;</span>: score</span><br><span class="line">        &#125;</span><br><span class="line">        _data.append(data)</span><br><span class="line">    score = <span class="built_in">sorted</span>(_data, key=<span class="keyword">lambda</span> score: score[<span class="string">&#x27;score&#x27;</span>], reverse=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> score</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Repeating_key_XOR</span>(<span class="params">_cipher, _key</span>):</span><br><span class="line">    message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    length = <span class="built_in">len</span>(_key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(_cipher)):</span><br><span class="line">        message += <span class="built_in">bytes</span>([_cipher[i] ^ _key[i % length]])</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hamming_distance</span>(<span class="params">a, b</span>):</span><br><span class="line">    distance = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(a, b):</span><br><span class="line">        byte = i ^ j</span><br><span class="line">        distance += <span class="built_in">sum</span>(k == <span class="string">&#x27;1&#x27;</span> <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">bin</span>(byte))</span><br><span class="line">    <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_the_keysize</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> keysize <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">41</span>):</span><br><span class="line">        block = [ciphertext[i:i + keysize] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), keysize)]</span><br><span class="line">        distances = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(block) - <span class="number">1</span>):</span><br><span class="line">            block1 = block[i]</span><br><span class="line">            block2 = block[i + <span class="number">1</span>]</span><br><span class="line">            distance = hamming_distance(block1, block2)</span><br><span class="line">            distances.append(distance / keysize)</span><br><span class="line">        _distance = <span class="built_in">sum</span>(distances) / <span class="built_in">len</span>(distances)</span><br><span class="line">        _data = &#123;</span><br><span class="line">            <span class="string">&#x27;keysize&#x27;</span>: keysize,</span><br><span class="line">            <span class="string">&#x27;distance&#x27;</span>: _distance</span><br><span class="line">        &#125;</span><br><span class="line">        data.append(_data)</span><br><span class="line">    _keysize = <span class="built_in">sorted</span>(data, key=<span class="keyword">lambda</span> distance: distance[<span class="string">&#x27;distance&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> _keysize</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Break_repeating_key_XOR</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    _keysize = Get_the_keysize(ciphertext)</span><br><span class="line">    keysize = _keysize[<span class="string">&#x27;keysize&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;keysize:&quot;</span>, keysize)</span><br><span class="line">    key = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    message = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    block = [ciphertext[i:i + keysize] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ciphertext), keysize)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(keysize):</span><br><span class="line">        new_block = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(block) - <span class="number">1</span>):</span><br><span class="line">            s = block[j]</span><br><span class="line">            new_block += <span class="built_in">bytes</span>([s[i]])</span><br><span class="line">        score = ciphertext_XOR(new_block)</span><br><span class="line">        key += <span class="built_in">bytes</span>([score[<span class="string">&#x27;Single character&#x27;</span>]])</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(block)):</span><br><span class="line">        message += Repeating_key_XOR(block[k], key)</span><br><span class="line">    <span class="keyword">return</span> message, key</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;decription.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> of:</span><br><span class="line">        ciphertext = of.read()</span><br><span class="line">        ciphertext = base64.b64decode(ciphertext)</span><br><span class="line">    message, key = Break_repeating_key_XOR(ciphertext)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, message.decode(<span class="string">&#x27;utf-8&#x27;</span>), <span class="string">&quot;\nkey:&quot;</span>, key.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>最后运算出密钥长度为<code>29</code>，<code>key: Terminator X: Bring the noise</code>解密后的明文为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">I&#x27;m back and I&#x27;m ringin&#x27; the bell </span><br><span class="line">A rockin&#x27; on the mike while the fly girls yell </span><br><span class="line">In ecstasy in the back of me </span><br><span class="line">Well that&#x27;s my DJ Deshay cuttin&#x27; all them Z&#x27;s </span><br><span class="line">Hittin&#x27; hard and the girlies goin&#x27; crazy </span><br><span class="line">Vanilla&#x27;s on the mike, man I&#x27;m not lazy. </span><br><span class="line"></span><br><span class="line">I&#x27;m lettin&#x27; my drug kick in </span><br><span class="line">It controls my mouth and I begin </span><br><span class="line">To just let it flow, let my concepts go </span><br><span class="line">My posse&#x27;s to the side yellin&#x27;, Go Vanilla Go! </span><br><span class="line"></span><br><span class="line">Smooth &#x27;cause that&#x27;s the way I will be </span><br><span class="line">And if you don&#x27;t give a damn, then </span><br><span class="line">Why you starin&#x27; at me </span><br><span class="line">So get off &#x27;cause I control the stage </span><br><span class="line">There&#x27;s no dissin&#x27; allowed </span><br><span class="line">I&#x27;m in my own phase </span><br><span class="line">The girlies sa y they love me and that is ok </span><br><span class="line">And I can dance better than any kid n&#x27; play </span><br><span class="line"></span><br><span class="line">Stage 2 -- Yea the one ya&#x27; wanna listen to </span><br><span class="line">It&#x27;s off my head so let the beat play through </span><br><span class="line">So I can funk it up and make it sound good </span><br><span class="line">1-2-3 Yo -- Knock on some wood </span><br><span class="line">For good luck, I like my rhymes atrocious </span><br><span class="line">Supercalafragilisticexpialidocious </span><br><span class="line">I&#x27;m an effect and that you can bet </span><br><span class="line">I can take a fly girl and make her wet. </span><br><span class="line"></span><br><span class="line">I&#x27;m like Samson -- Samson to Delilah </span><br><span class="line">There&#x27;s no denyin&#x27;, You can try to hang </span><br><span class="line">But you&#x27;ll keep tryin&#x27; to get my style </span><br><span class="line">Over and over, practice makes perfect </span><br><span class="line">But not if you&#x27;re a loafer. </span><br><span class="line"></span><br><span class="line">You&#x27;ll get nowhere, no place, no time, no girls </span><br><span class="line">Soon -- Oh my God, homebody, you probably eat </span><br><span class="line">Spaghetti with a spoon! Come on and say it! </span><br><span class="line"></span><br><span class="line">VIP. Vanilla Ice yep, yep, I&#x27;m comin&#x27; hard like a rhino </span><br><span class="line">Intoxicating so you stagger like a wino </span><br><span class="line">So punks stop trying and girl stop cryin&#x27; </span><br><span class="line">Vanilla Ice is sellin&#x27; and you people are buyin&#x27; </span><br><span class="line">&#x27;Cause why the freaks are jockin&#x27; like Crazy Glue </span><br><span class="line">Movin&#x27; and groovin&#x27; trying to sing along </span><br><span class="line">All through the ghetto groovin&#x27; this here song </span><br><span class="line">Now you&#x27;re amazed by the VIP posse. </span><br><span class="line"></span><br><span class="line">Steppin&#x27; so hard like a German Nazi </span><br><span class="line">Startled by the bases hittin&#x27; ground </span><br><span class="line">There&#x27;s no trippin&#x27; on mine, I&#x27;m just gettin&#x27; down </span><br><span class="line">Sparkamatic, I&#x27;m hangin&#x27; tight like a fanatic </span><br><span class="line">You trapped me once and I thought that </span><br><span class="line">You might have it </span><br><span class="line">So step down and lend me your ear </span><br><span class="line">&#x27;89 in my time! You, &#x27;90 is my year. </span><br><span class="line"></span><br><span class="line">You&#x27;re weakenin&#x27; fast, YO! and I can tell it </span><br><span class="line">Your body&#x27;s gettin&#x27; hot, so, so I can smell it </span><br><span class="line">So don&#x27;t be mad and don&#x27;t be sad </span><br><span class="line">&#x27;Cause the lyrics belong to ICE, You can call me Dad </span><br><span class="line">You&#x27;re pitchin&#x27; a fit, so step back and endure </span><br><span class="line">Let the witch doctor, Ice, do the dance to cure </span><br><span class="line">So come up close and don&#x27;t be square </span><br><span class="line">You wanna battle me -- Anytime, anywhere </span><br><span class="line"></span><br><span class="line">You thought that I was weak, Boy, you&#x27;re dead wrong </span><br><span class="line">So come on, everybody and sing this song </span><br><span class="line"></span><br><span class="line">Say -- Play that funky music Say, go white boy, go white boy go </span><br><span class="line">play that funky music Go white boy, go white boy, go </span><br><span class="line">Lay down and boogie and play that funky music till you die. </span><br><span class="line"></span><br><span class="line">Play that funky music Come on, Come on, let me hear </span><br><span class="line">Play that funky music white boy you say it, say it </span><br><span class="line">Play that funky music A little louder now </span><br><span class="line">Play that funky music, white boy Come on, Come on, Come on </span><br><span class="line">Play that funky music</span><br></pre></td></tr></table></figure><h2 id="4-MTC3-Cracking-SHA1-Hashed-Passwords">4.MTC3 Cracking SHA1-Hashed Passwords</h2><p>题目链接(<a href="https://www.mysterytwisterc3.org/en/challenges/level-2/cracking-sha1-hashed-passwords">link</a>)</p><p>根据图片中键盘上的指纹分布，可以看出右边的数字键只有2486，很有可能是当做上下左右的功能，（常识这个应该是没有在密钥里的）所以就可以将密钥空间缩小。然后逐一写出剩余的可能按键，最后写一个dfs算法遍历每一种情况再用SHA1加密最后和给定哈希值比对。这里设置时钟得到运行时间为<code>1s</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">hash1 = <span class="string">&quot;67ae1a64661ac8b4494666f58c4822408dd0a3e4&quot;</span></span><br><span class="line">str2 = [[<span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;q&#x27;</span>], [<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;w&#x27;</span>], [<span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;5&#x27;</span>], [<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;(&#x27;</span>], [<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;0&#x27;</span>], [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;i&#x27;</span>], [<span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>], [<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;N&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha_encrypt</span>(<span class="params">string</span>):</span><br><span class="line">    sha = hashlib.sha1(string.encode())</span><br><span class="line">    <span class="keyword">return</span> sha.hexdigest()</span><br><span class="line"></span><br><span class="line">starttime = datetime.datetime.now()</span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> itertools.product(*str2):</span><br><span class="line">    <span class="keyword">for</span> perm <span class="keyword">in</span> itertools.permutations(combination):</span><br><span class="line">        candidate = <span class="string">&quot;&quot;</span>.join(perm)</span><br><span class="line">        <span class="keyword">if</span> sha_encrypt(candidate) == hash1:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ans:&quot;</span>, candidate)</span><br><span class="line">            endtime = datetime.datetime.now()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;t:&quot;</span>, (endtime - starttime).seconds, <span class="string">&quot;seconds&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Password not found.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="实验总结">实验总结</h2><p>本次试验我学会了编写简单的密码算法，对编码和加解密的过程更加熟悉。其中在第一个实验中我一开始是通过对亦或后明文的特征进行条件限制来爆破明文信息，但是总会有几位出现乱码，所以说我基于之前部分爆破的明文选择通过人为分析这些亦或后的明文特征，推测出最长的一条明文信息，最后得到密钥解密。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 密码学实验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
